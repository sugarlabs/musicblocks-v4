{"version":3,"file":"index-4245e63e.js","sources":["../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/elements/elementSyntax.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/elements/elementArgument.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/elements/elementInstruction.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/specification/specification.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/regex.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/validate.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/v1.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/parse.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/v35.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/md5.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/v3.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/v4.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/sha1.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/v5.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/nil.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/node_modules/uuid/dist/esm-browser/version.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/warehouse/warehouse.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/tree/node.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/syntax/tree/syntaxTree.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/execution/symbolTable.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/execution/parser.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/execution/interpreter.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementValue.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementBox.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementBoxIdentifier.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementOperatorMath.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementLoop.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementConditional.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementProgram.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/elements/elementPrint.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/library/specification.js","../../../node_modules/@sugarlabs/musicblocks-v4-lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementSyntax = void 0;\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Defines a generic syntax element and it's properties.\n *\n * @classdesc\n * Syntax elements define the building blocks of a Music Blocks program. Every building block\n * element need to inherit this class.\n */\nclass ElementSyntax {\n    /**\n     *\n     * @param name name of the syntax element\n     * @param label display of the syntax element\n     * @param kind kind (`Argument`, `Instruction`) of the syntax element\n     * @param type type (`Data`, `Expression`, `Statement`, `Block`) of the syntax element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     */\n    constructor(name, label, kind, type, argMap) {\n        this._name = name;\n        this._label = label;\n        this._kind = kind;\n        this._type = type;\n        this._argMap = argMap;\n        this._argLabels = Object.keys(this._argMap);\n        this._argCount = this.argLabels.length;\n    }\n    get name() {\n        return this._name;\n    }\n    get label() {\n        return this._label;\n    }\n    get kind() {\n        return this._kind;\n    }\n    get type() {\n        return this._type;\n    }\n    get argCount() {\n        return this._argCount;\n    }\n    get argLabels() {\n        return this._argLabels;\n    }\n    getArgType(argName) {\n        return this._argMap[argName];\n    }\n    updateLabel(value) {\n        this._label = value;\n    }\n}\nexports.ElementSyntax = ElementSyntax;\n//# sourceMappingURL=elementSyntax.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementExpression = exports.ElementData = exports.ElementArgument = void 0;\nconst elementSyntax_1 = require(\"./elementSyntax\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Generic class that defines a generic argument element.\n *\n * @classdesc\n * Argument elements return a value which is either stored (data element) or evaluated (expression\n * element) from the parameters passed. Every data element and expression element needs to extend\n * this class.\n */\nclass ElementArgument extends elementSyntax_1.ElementSyntax {\n    /**\n     * @param name name of the argument element\n     * @param label display name of the instruction element\n     * @param type type (`Data`, `Expression`) of the argument element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     * @param returnType return types of the value returned by the argument element\n     * @param initialValue initial return value of the argument\n     */\n    constructor(name, label, type, argMap, returnType, initialValue) {\n        super(name, label, 'Argument', type, argMap);\n        this._returnType = returnType;\n        this._value = initialValue;\n    }\n    get returnType() {\n        return this._returnType;\n    }\n    get value() {\n        return this._value;\n    }\n}\nexports.ElementArgument = ElementArgument;\n/**\n * @virtual\n * @class\n * Generic class that defines a generic data element.\n *\n * @classdesc\n * Data elements return a stored value.\n */\nclass ElementData extends ElementArgument {\n    /**\n     * @param name - name of the data element\n     * @param label - display name of the instruction element\n     * @param argMap - an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     * @param returnType - return types of the value returned by the argument element\n     * @param initialValue - initial return value of the argument\n     */\n    constructor(name, label, argMap, returnType, initialValue) {\n        super(name, label, 'Data', argMap, returnType, initialValue);\n    }\n}\nexports.ElementData = ElementData;\n/**\n * @virtual\n * @class\n * Generic class that defines a generic expression element.\n *\n * @classdesc\n * Expression elements evalutate a value based on the provided passed whose shape is in accordance\n * with the shape of arguments it registers.\n */\nclass ElementExpression extends ElementArgument {\n    /**\n     * @param name name of the expression element\n     * @param label display name of the instruction element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     * @param returnType return types of the value returned by the argument element\n     * @param initialValue initial return value of the argument\n     */\n    constructor(name, label, argMap, returnType, initialValue) {\n        super(name, label, 'Expression', argMap, returnType, initialValue);\n    }\n}\nexports.ElementExpression = ElementExpression;\n//# sourceMappingURL=elementArgument.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementBlock = exports.ElementStatement = exports.ElementInstruction = void 0;\nconst elementSyntax_1 = require(\"./elementSyntax\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Defines a generic instruction element.\n *\n * @classdesc\n * Instruction elements execute logic and may operate on the parameters passed. Every statement\n * element and block element needs to extend this class.\n */\nclass ElementInstruction extends elementSyntax_1.ElementSyntax {\n    /**\n     * @param name name of the instruction element\n     * @param label display name of the instruction element\n     * @param type type (`Statement`, `Block`) of the instruction element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     */\n    constructor(name, label, type, argMap) {\n        super(name, label, 'Instruction', type, argMap);\n    }\n}\nexports.ElementInstruction = ElementInstruction;\n/**\n * @virtual\n * @class\n * Defines a generic statement element.\n *\n * @classdesc\n * Statement elements execute one single logic.\n */\nclass ElementStatement extends ElementInstruction {\n    /**\n     * @param name name of the statement element\n     * @param label display name of the instruction element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     */\n    constructor(name, label, argMap) {\n        super(name, label, 'Statement', argMap);\n    }\n}\nexports.ElementStatement = ElementStatement;\n/**\n * @virtual\n * @class\n * Defines a generic block element.\n *\n * @classdesc\n * Block elements encapsulate other instruction elements and set-up states prior to their execution.\n * After the contained instruction elements have completed execution, the initial state prior to\n * visiting the block element is restored.\n */\nclass ElementBlock extends ElementInstruction {\n    /**\n     * @param name name of the block element\n     * @param label display name of the instruction element\n     * @param argMap an object describing the type specification of each argument as a\n     *  `argName: type[]` pair\n     */\n    constructor(name, label, argMap) {\n        super(name, label, 'Block', argMap);\n    }\n}\nexports.ElementBlock = ElementBlock;\n//# sourceMappingURL=elementInstruction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkValueAssignment = exports.getSpecificationSnapshot = exports.resetElementSpecificationTable = exports.getElementCategories = exports.getElementNames = exports.queryElementSpecification = exports.removeElementSpecificationEntries = exports.removeElementSpecificationEntry = exports.registerElementSpecificationEntries = exports.registerElementSpecificationEntry = void 0;\n// -- private variables ----------------------------------------------------------------------------\n/** Stores the specifications for each element as a key-value pair of name: specification. */\nlet _elementSpecification = {};\n/**\n * Stores the snapshot (similar to snapshot, except that prototype is replaced with prototype name —\n * class name of the syntax element or the prototype) of the specifications for each element as a\n * key-value pair of name: specification.\n */\nlet _elementSpecificationSnapshot = {};\n// -- public functions -----------------------------------------------------------------------------\n/**\n * Registers a syntax element specification from a given specification entry data.\n * @param name name of the syntax element\n * @param specification specification entry data\n * @returns `false` if element name already exists, else `true`\n */\nfunction registerElementSpecificationEntry(name, specification) {\n    if (name in _elementSpecification)\n        return false;\n    const { label, type, category, prototype } = specification;\n    const specificationTableEntry = {\n        label,\n        type,\n        category,\n        // @ts-ignore\n        prototype: (name, label) => new prototype(name, label),\n    };\n    const specificationSnapshotTableEntry = {\n        label,\n        type,\n        category,\n        prototypeName: prototype.name,\n    };\n    Object.entries(specification).forEach(([key, value]) => {\n        if (!['label', 'type', 'category', 'prototype'].includes(key)) {\n            // @ts-ignore\n            specificationTableEntry[key] = value;\n            // @ts-ignore\n            specificationSnapshotTableEntry[key] = value;\n        }\n    });\n    _elementSpecification[name] = specificationTableEntry;\n    _elementSpecificationSnapshot[name] = specificationSnapshotTableEntry;\n    return name in _elementSpecification;\n}\nexports.registerElementSpecificationEntry = registerElementSpecificationEntry;\n/**\n * Registers a syntax element specification from a given specification entry table.\n * @param specification specification entry table object with key-value pairs of element name and\n *  corresponding specification entry data\n * @returns a list of boolean , `false` if element name already exists else `true`\n */\nfunction registerElementSpecificationEntries(specification) {\n    const registerStatus = [];\n    Object.entries(specification).forEach(([identifier, specification]) => registerStatus.push(registerElementSpecificationEntry(identifier, specification)));\n    return registerStatus;\n}\nexports.registerElementSpecificationEntries = registerElementSpecificationEntries;\n/**\n * Removes specification for a syntax element.\n * @param name name of the syntax element\n * @returns `true` if element is successfully removed, else `false` if element doesn't exist already\n */\nfunction removeElementSpecificationEntry(name) {\n    if (name in _elementSpecification) {\n        delete _elementSpecification[name];\n        delete _elementSpecificationSnapshot[name];\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.removeElementSpecificationEntry = removeElementSpecificationEntry;\n/**\n * Removes specification for a list of syntax element.\n * @param names list of names of the syntax element\n * @returns list of boolean, `true` if element is successfully removed, else `false`\n */\nfunction removeElementSpecificationEntries(names) {\n    const removeStatus = [];\n    names.forEach((name) => removeStatus.push(removeElementSpecificationEntry(name)));\n    return removeStatus;\n}\nexports.removeElementSpecificationEntries = removeElementSpecificationEntries;\n/**\n * Returns the element specification for a syntax element.\n * @param name name of the syntax element\n * @returns element specification if exists, else `null`\n */\nfunction queryElementSpecification(name) {\n    return name in _elementSpecification ? Object.assign({}, _elementSpecification[name]) : null;\n}\nexports.queryElementSpecification = queryElementSpecification;\n/**\n * Returns the names of available syntax elements.\n * @returns a list of syntax element names.\n */\nfunction getElementNames() {\n    return Object.keys(_elementSpecification);\n}\nexports.getElementNames = getElementNames;\n/**\n * Returns the categories of available syntax elements.\n * @returns a list of syntax element categories\n */\nfunction getElementCategories() {\n    return [...new Set(Object.entries(_elementSpecification).map(([_, { category }]) => category))];\n}\nexports.getElementCategories = getElementCategories;\n/**\n * Resets the element specification to factory list.\n */\nfunction resetElementSpecificationTable() {\n    _elementSpecification = {};\n    _elementSpecificationSnapshot = {};\n}\nexports.resetElementSpecificationTable = resetElementSpecificationTable;\n/**\n * Returns the snapshot of the element specification table.\n * @returns snapshot entry table object with key-value pairs of element name and corresponding\n * element specification snapshot\n */\nfunction getSpecificationSnapshot() {\n    return _elementSpecificationSnapshot;\n}\nexports.getSpecificationSnapshot = getSpecificationSnapshot;\n/**\n * Check if `value` can be assigned to element `name`.\n * @param name name of the syntax element (expecting a data element)\n * @param value value to check\n * @returns whether value can be assigned\n */\nfunction checkValueAssignment(name, value) {\n    if ('values' in _elementSpecification[name]) {\n        const values = _elementSpecification[name].values;\n        if (values instanceof Array) {\n            return values.includes(value);\n        }\n        else {\n            let typeDeepInfer;\n            if (['true', 'false'].includes(value)) {\n                typeDeepInfer = 'boolean';\n            }\n            else if (!isNaN(Number(value))) {\n                typeDeepInfer = 'number';\n            }\n            else {\n                typeDeepInfer = 'string';\n            }\n            return (values.types.includes(typeDeepInfer) || values.types.includes('string'));\n        }\n    }\n    return true;\n}\nexports.checkValueAssignment = checkValueAssignment;\nresetElementSpecificationTable();\n//# sourceMappingURL=specification.js.map","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resetWarehouse = exports.getCategoryCountAll = exports.getCategoryCount = exports.getTypeCountAll = exports.getTypeCount = exports.getKindCountAll = exports.getKindCount = exports.getNameCountAll = exports.getNameCount = exports.removeInstance = exports.getInstance = exports.addInstance = void 0;\nconst uuid_1 = require(\"uuid\");\nconst specification_1 = require(\"../specification/specification\");\nconst elementArgument_1 = require(\"../elements/elementArgument\");\n// -- private variables ----------------------------------------------------------------------------\n/** A non-generic wrapper for class `ElementData`. */\nclass _ElementDataCover extends elementArgument_1.ElementData {\n}\n/** A non-generic wrapper for class `ElementExpression`. */\nclass _ElementExpressionCover extends elementArgument_1.ElementExpression {\n}\n/** Stores the count of element name. */\nlet _elementNameCountMap = {};\n/** Stores the count of element kind. */\nlet _elementKindCountMap = {};\n/** Stores the count of element type. */\nlet _elementTypeCountMap = {};\n/** Stores the count of element category. */\nlet _elementCategoryCountMap = {};\n/** Stores an extensive table of element name, kind, type, category, instance, by instance ID. */\nlet _elementMap = {};\n// -- private functions ----------------------------------------------------------------------------\n/**\n * Helper function that creates a new instance, adds to element table, and updates count tables.\n * @param elementName - name of the element\n * @param instanceID - key for entry in element table\n * @param instance - element instance\n * @param type - type of the element\n * @param category - category of the element\n */\nfunction _addInstance(elementName, instanceID, instance, type, category) {\n    const kind = type === 'Data' || type === 'Expression' ? 'Argument' : 'Instruction';\n    switch (type) {\n        case 'Data':\n            _elementMap[instanceID] = {\n                instance: instance,\n                name: elementName,\n                type: type,\n                kind: 'Argument',\n                category: category,\n            };\n            break;\n        case 'Expression':\n            _elementMap[instanceID] = {\n                instance: instance,\n                name: elementName,\n                type: type,\n                kind: 'Argument',\n                category: category,\n            };\n            break;\n        case 'Statement':\n            _elementMap[instanceID] = {\n                instance: instance,\n                name: elementName,\n                type: type,\n                kind: 'Instruction',\n                category: category,\n            };\n            break;\n        case 'Block':\n            _elementMap[instanceID] = {\n                instance: instance,\n                name: elementName,\n                type: type,\n                kind: 'Instruction',\n                category: category,\n            };\n            break;\n    }\n    _elementNameCountMap[elementName]++;\n    _elementKindCountMap[kind]++;\n    _elementTypeCountMap[type]++;\n    _elementCategoryCountMap[category]++;\n}\n/**\n * Helper that resets the element name count table.\n */\nfunction _resetElementNameCountMap() {\n    _elementNameCountMap = {};\n    (0, specification_1.getElementNames)().forEach((elementName) => (_elementNameCountMap[elementName] = 0));\n}\n/**\n * Helper that resets the element kind count table.\n */\nfunction _resetElementKindCountMap() {\n    _elementKindCountMap = {\n        Argument: 0,\n        Instruction: 0,\n    };\n}\n/**\n * Helper that resets the element type count table.\n */\nfunction _resetElementTypeCountMap() {\n    _elementTypeCountMap = {\n        Data: 0,\n        Expression: 0,\n        Statement: 0,\n        Block: 0,\n    };\n}\n/**\n * Helper that resets the element category count table.\n */\nfunction _resetElementCategoryCountMap() {\n    _elementCategoryCountMap = {};\n    (0, specification_1.getElementCategories)().forEach((category) => (_elementCategoryCountMap[category] = 0));\n}\n// -- public functions -----------------------------------------------------------------------------\n/**\n * Creates a new instance, adds to element table, and updates count tables.\n * @param elementName - name of the element\n * @returns - unique instance ID for the element instance\n */\nfunction addInstance(elementName) {\n    const elementSpecification = (0, specification_1.queryElementSpecification)(elementName);\n    if (elementSpecification === null) {\n        throw Error(`InvalidAccessError: element with name \"${elementName}\" does not exist`);\n    }\n    const { label, type, category, prototype } = elementSpecification;\n    let instance;\n    switch (type) {\n        case 'Data':\n            instance = prototype(elementName, label);\n            break;\n        case 'Expression':\n            instance = prototype(elementName, label);\n            break;\n        case 'Statement':\n            instance = prototype(elementName, label);\n            break;\n        case 'Block':\n        default:\n            instance = prototype(elementName, label);\n    }\n    let instanceID;\n    do {\n        instanceID = (0, uuid_1.v4)();\n    } while (instanceID in _elementMap);\n    _addInstance(elementName, instanceID, instance, type, category);\n    return instanceID;\n}\nexports.addInstance = addInstance;\n/**\n * Fetches the element instance entry from element table.\n * @param instanceID - instance ID of the element in element table\n * @returns element instance with additional properties\n */\nfunction getInstance(instanceID) {\n    return instanceID in _elementMap ? Object.assign({}, _elementMap[instanceID]) : null;\n}\nexports.getInstance = getInstance;\n/**\n * Removes the element entry corresponding to the instance ID and updates count tables.\n * @param instanceID - instance ID of the element in element table\n */\nfunction removeInstance(instanceID) {\n    if (!(instanceID in _elementMap)) {\n        return;\n    }\n    const { name, kind, type, category } = _elementMap[instanceID];\n    _elementNameCountMap[name]--;\n    _elementKindCountMap[kind]--;\n    _elementTypeCountMap[type]--;\n    _elementCategoryCountMap[category]--;\n    delete _elementMap[instanceID];\n}\nexports.removeInstance = removeInstance;\n/**\n * Returns the number of element instances of an element name exists in element table.\n * @param name - name of the element\n * @returns count of the element instances for the element name\n */\nfunction getNameCount(name) {\n    return _elementNameCountMap[name];\n}\nexports.getNameCount = getNameCount;\n/**\n * Generates a table of element instance counts by element name.\n * @returns an object with key-value pairs of element name and instance count\n */\nfunction getNameCountAll() {\n    return Object.assign({}, _elementNameCountMap);\n}\nexports.getNameCountAll = getNameCountAll;\n/**\n * Returns the number of element instances of an element kind exists in element table.\n * @param kind - kind of the element\n * @returns count of the element instances for the element kind\n */\nfunction getKindCount(kind) {\n    return _elementKindCountMap[kind];\n}\nexports.getKindCount = getKindCount;\n/**\n * Generates a table of element instance counts by element kind.\n * @returns an object with key-value pairs of element kind and instance count\n */\nfunction getKindCountAll() {\n    return Object.assign({}, _elementKindCountMap);\n}\nexports.getKindCountAll = getKindCountAll;\n/**\n * Returns the number of element instances of an element type exists in element table.\n * @param type - type of the element\n * @returns count of the element instances for the element type\n */\nfunction getTypeCount(type) {\n    return _elementTypeCountMap[type];\n}\nexports.getTypeCount = getTypeCount;\n/**\n * Generates a table of element instance counts by element type.\n * @returns an object with key-value pairs of element type and instance count\n */\nfunction getTypeCountAll() {\n    return Object.assign({}, _elementTypeCountMap);\n}\nexports.getTypeCountAll = getTypeCountAll;\n/**\n * Returns the number of element instances of an element category exists in element table.\n * @param category - category of the element\n * @returns count of the element instances for the element category\n */\nfunction getCategoryCount(category) {\n    return _elementCategoryCountMap[category];\n}\nexports.getCategoryCount = getCategoryCount;\n/**\n * Generates a table of element instance counts by element category.\n * @returns an object with key-value pairs of element category and instance count\n */\nfunction getCategoryCountAll() {\n    return Object.assign({}, _elementCategoryCountMap);\n}\nexports.getCategoryCountAll = getCategoryCountAll;\n/**\n * Resets all the count tables and element map.\n */\nfunction resetWarehouse() {\n    _elementMap = {};\n    _resetElementNameCountMap();\n    _resetElementKindCountMap();\n    _resetElementTypeCountMap();\n    _resetElementCategoryCountMap();\n}\nexports.resetWarehouse = resetWarehouse;\nresetWarehouse();\n//# sourceMappingURL=warehouse.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeNodeBlock = exports.TreeNodeStatement = exports.TreeNodeExpression = exports.TreeNodeData = exports.TreeNode = void 0;\nconst warehouse_1 = require(\"../warehouse/warehouse\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Defines a generic syntax tree node.\n */\nclass TreeNode {\n    constructor(\n    /** Name of the syntax element. */\n    elementName, \n    /** Node ID of the syntax tree node instance. */\n    nodeID, \n    /** Warehouse ID of the syntax element instance. */\n    instanceID) {\n        /** Stores key-value pairs of argument names and corresponding argument nodes. */\n        this._argConnections = {};\n        this._elementName = elementName;\n        this._nodeID = nodeID;\n        this._instanceID = instanceID;\n        const instance = (0, warehouse_1.getInstance)(this._instanceID);\n        instance.instance.argLabels.forEach((label) => (this._argConnections[label] = null));\n    }\n    get nodeID() {\n        return this._nodeID;\n    }\n    get instanceID() {\n        return this._instanceID;\n    }\n    /**\n     * Helper that adds an argument connection.\n     * @param argName - name of the argument\n     * @param node - node instance of the connecting node\n     */\n    _attachArg(argName, node) {\n        this._argConnections[argName] = node;\n    }\n    /**\n     * Helper that removes an argument connection.\n     * @param argName - name of the argument\n     */\n    _detachArg(argName) {\n        this._argConnections[argName] = null;\n    }\n    /**\n     * Helper that generates a snapshot of the arguments.\n     */\n    _getArgSnapshot() {\n        const instance = (0, warehouse_1.getInstance)(this._instanceID);\n        if (instance.instance.argCount === 0) {\n            return null;\n        }\n        this._elementName;\n        const snapshot = {};\n        instance.instance.argLabels.forEach((label) => (snapshot[label] =\n            this._argConnections[label] === null\n                ? null\n                : this._argConnections[label].snapshot));\n        return snapshot;\n    }\n}\nexports.TreeNode = TreeNode;\n/**\n * @virtual\n * @class\n * Defines a generic syntax tree argument element node.\n */\nclass TreeNodeArgument extends TreeNode {\n    constructor() {\n        super(...arguments);\n        this.connectedTo = null;\n    }\n}\n/**\n * @class\n * Defines a syntax tree data element node.\n */\nclass TreeNodeData extends TreeNodeArgument {\n    get elementName() {\n        return this._elementName;\n    }\n    get snapshot() {\n        return {\n            elementName: this._elementName,\n            nodeID: this._nodeID,\n        };\n    }\n}\nexports.TreeNodeData = TreeNodeData;\n/**\n * @class\n * Defines a syntax tree expression element node.\n */\nclass TreeNodeExpression extends TreeNodeArgument {\n    constructor() {\n        super(...arguments);\n        this.argConnections = this._argConnections;\n        this.attachArg = super._attachArg;\n        this.detachArg = super._detachArg;\n    }\n    get elementName() {\n        return this._elementName;\n    }\n    get snapshot() {\n        return {\n            elementName: this._elementName,\n            nodeID: this._nodeID,\n            argMap: this._getArgSnapshot(),\n        };\n    }\n}\nexports.TreeNodeExpression = TreeNodeExpression;\n/**\n * @virtual\n * @class\n * Defines a generic syntax tree instruction element node.\n */\nclass TreeNodeInstruction extends TreeNode {\n    constructor() {\n        super(...arguments);\n        this.argConnections = this._argConnections;\n        this.attachArg = super._attachArg;\n        this.detachArg = super._detachArg;\n        this.beforeConnection = null;\n        this.afterConnection = null;\n        this.nestLevel = 0;\n        this.parentBlock = null;\n    }\n}\n/**\n * @class\n * Defines a syntax tree statement element node.\n */\nclass TreeNodeStatement extends TreeNodeInstruction {\n    get elementName() {\n        return this._elementName;\n    }\n    get snapshot() {\n        return {\n            elementName: this._elementName,\n            nodeID: this._nodeID,\n            argMap: this._getArgSnapshot(),\n        };\n    }\n}\nexports.TreeNodeStatement = TreeNodeStatement;\n/**\n * @class\n * Defines a syntax tree block element node.\n */\nclass TreeNodeBlock extends TreeNodeInstruction {\n    constructor() {\n        super(...arguments);\n        this.innerConnection = null;\n        this.innerCount = 0;\n    }\n    get elementName() {\n        return this._elementName;\n    }\n    get snapshot() {\n        const scope = [];\n        let nextNode = this.innerConnection;\n        while (nextNode !== null) {\n            scope.push(nextNode.snapshot);\n            nextNode = nextNode.afterConnection;\n        }\n        return {\n            elementName: this._elementName,\n            nodeID: this._nodeID,\n            argMap: this._getArgSnapshot(),\n            scope,\n        };\n    }\n}\nexports.TreeNodeBlock = TreeNodeBlock;\n//# sourceMappingURL=node.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assignNodeValue = exports.generateFromSnapshot = exports.generateSnapshot = exports.detachInstructionInside = exports.attachInstructionInside = exports.attachInstructionInsideCheck = exports.detachInstructionBelow = exports.attachInstructionBelow = exports.attachInstructionBelowCheck = exports.detachArgument = exports.attachArgument = exports.attachArgumentCheck = exports.resetSyntaxTree = exports.removeNode = exports.getNode = exports.addNode = exports.getCrumbs = exports.getRoutineNodes = exports.getProcessNodes = void 0;\nconst uuid_1 = require(\"uuid\");\nconst node_1 = require(\"./node\");\nconst warehouse_1 = require(\"../warehouse/warehouse\");\nconst specification_1 = require(\"../specification/specification\");\n// -- private variables ----------------------------------------------------------------------------\n/** Stores a table with key-value pairs of node ID and corresponding node instance. */\nconst _nodeMap = {};\n/** Stores the syntax tree. */\nlet _syntaxTree = {\n    process: [],\n    routine: [],\n    crumbs: [],\n};\n// -- private functions ----------------------------------------------------------------------------\n/**\n * Helper that removes corresponding element instance and removes node table entry.\n * @param nodeID - node ID\n */\nfunction _destroyNode(nodeID) {\n    if (!(nodeID in _nodeMap)) {\n        return;\n    }\n    const node = _nodeMap[nodeID];\n    (0, warehouse_1.removeInstance)(node.instanceID);\n    delete _nodeMap[nodeID];\n}\n/**\n * Helper that checks whether two instruction element nodes can be connected.\n * @param connectorNodeID - node ID of the connector node\n * @param connectingNodeID - node ID of the connecting node\n * @returns `true` if node connections are valid, else `false`\n */\nfunction _attachInstructionCheck(connectorNodeID, connectingNodeID) {\n    if (!(connectorNodeID in _nodeMap) || !(connectingNodeID in _nodeMap)) {\n        return false;\n    }\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    const specificationConnector = (0, specification_1.queryElementSpecification)(nodeConnector.elementName);\n    const specificationConnecting = (0, specification_1.queryElementSpecification)(nodeConnecting.elementName);\n    if (specificationConnector.type === 'Data' ||\n        specificationConnector.type === 'Expression' ||\n        specificationConnecting.type === 'Data' ||\n        specificationConnecting.type === 'Expression') {\n        return false;\n    }\n    return true;\n}\n// -- public functions -----------------------------------------------------------------------------\n/**\n * @returns the list of process element nodes.\n */\nfunction getProcessNodes() {\n    return _syntaxTree['process'];\n}\nexports.getProcessNodes = getProcessNodes;\n/**\n * @returns the list of routine element nodes.\n */\nfunction getRoutineNodes() {\n    return _syntaxTree['routine'];\n}\nexports.getRoutineNodes = getRoutineNodes;\n/**\n * @returns the list of top instruction element nodes of crumb stacks.\n */\nfunction getCrumbs() {\n    return _syntaxTree['crumbs'];\n}\nexports.getCrumbs = getCrumbs;\n/**\n * Adds a new element to the syntax tree.\n * @param name - name of the syntax element\n * @returns node ID of the syntax tree node\n */\nfunction addNode(name) {\n    const instanceID = (0, warehouse_1.addInstance)(name);\n    let nodeID;\n    do {\n        nodeID = (0, uuid_1.v4)();\n    } while (nodeID in _nodeMap);\n    let node;\n    const specification = (0, specification_1.queryElementSpecification)(name);\n    switch (specification.type) {\n        case 'Data':\n            node = new node_1.TreeNodeData(name, nodeID, instanceID);\n            break;\n        case 'Expression':\n            node = new node_1.TreeNodeExpression(name, nodeID, instanceID);\n            break;\n        case 'Statement':\n            node = new node_1.TreeNodeStatement(name, nodeID, instanceID);\n            break;\n        case 'Block':\n        default:\n            node = new node_1.TreeNodeBlock(name, nodeID, instanceID);\n    }\n    _nodeMap[nodeID] = node;\n    if (name === 'process') {\n        _syntaxTree['process'].push(node);\n    }\n    else if (name === 'routine') {\n        _syntaxTree['routine'].push(node);\n    }\n    else {\n        _syntaxTree['crumbs'].push(node);\n    }\n    return nodeID;\n}\nexports.addNode = addNode;\n/**\n * Returns a new entry from the syntax tree.\n * @param nodeID - node ID of the syntax tree node\n * @returns syntax tree node entry if present, else `null`\n */\nfunction getNode(nodeID) {\n    return nodeID in _nodeMap ? _nodeMap[nodeID] : null;\n}\nexports.getNode = getNode;\n/**\n * Removes an element node from the syntax tree.\n * @param nodeID - node ID of the syntax tree node\n */\nfunction removeNode(nodeID) {\n    if (!(nodeID in _nodeMap)) {\n        return;\n    }\n    const node = _nodeMap[nodeID];\n    let list;\n    if (node.elementName === 'process') {\n        list = _syntaxTree['process'];\n    }\n    else if (node.elementName === 'routine') {\n        list = _syntaxTree['routine'];\n    }\n    else {\n        list = _syntaxTree['crumbs'];\n    }\n    list.splice(list.indexOf(node), 1);\n    _destroyNode(nodeID);\n}\nexports.removeNode = removeNode;\n/**\n * Resets the syntax tree — removes all nodes and syntax element instances.\n */\nfunction resetSyntaxTree() {\n    Object.entries(_nodeMap).forEach(([nodeID]) => {\n        _destroyNode(nodeID);\n    });\n    _syntaxTree = {\n        process: [],\n        routine: [],\n        crumbs: [],\n    };\n}\nexports.resetSyntaxTree = resetSyntaxTree;\n/**\n * Checks whether an argument element node can be connected.\n * @param connectorNodeID - node ID of the connector node\n * @param connectingNodeID - node ID of the connecting argument element node\n * @returns - `true` if node connections are valid, else `false`\n */\nfunction attachArgumentCheck(connectorNodeID, connectingNodeID, argName) {\n    if (!(connectorNodeID in _nodeMap) || !(connectingNodeID in _nodeMap)) {\n        return false;\n    }\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    const specificationConnector = (0, specification_1.queryElementSpecification)(nodeConnector.elementName);\n    const specificationConnecting = (0, specification_1.queryElementSpecification)(nodeConnecting.elementName);\n    if (specificationConnector.type === 'Data' ||\n        specificationConnecting.type === 'Statement' ||\n        specificationConnecting.type === 'Block') {\n        return false;\n    }\n    const instanceConnector = (0, warehouse_1.getInstance)(nodeConnector.instanceID);\n    const instanceConnecting = (0, warehouse_1.getInstance)(nodeConnecting.instanceID);\n    if (!instanceConnector.instance.argLabels.includes(argName)) {\n        return false;\n    }\n    const typeConnector = instanceConnector.instance.getArgType(argName);\n    const typeConnecting = instanceConnecting.instance.returnType;\n    for (const type of typeConnecting) {\n        if (!typeConnector.includes(type)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.attachArgumentCheck = attachArgumentCheck;\n/**\n * Attaches an argument element node.\n * @param connectorNodeID - node ID of the connector node\n * @param connectingNodeID - node ID of the connecting argument element node\n * @param argName - name of the argument\n */\nfunction attachArgument(connectorNodeID, connectingNodeID, argName) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.attachArg(argName, nodeConnecting);\n    nodeConnecting.connectedTo = nodeConnector;\n    if (_syntaxTree.crumbs.includes(nodeConnecting)) {\n        _syntaxTree.crumbs.splice(_syntaxTree.crumbs.indexOf(nodeConnecting), 1);\n    }\n}\nexports.attachArgument = attachArgument;\n/**\n * Detaches an argument element node.\n * @param connectorNodeID - node ID of the connector node\n * @param connectingNodeID - node ID of the connecting argument element node\n * @param argName - name of the argument\n */\nfunction detachArgument(connectorNodeID, connectingNodeID, argName) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.detachArg(argName);\n    nodeConnecting.connectedTo = null;\n    _syntaxTree.crumbs.push(nodeConnecting);\n}\nexports.detachArgument = detachArgument;\n/**\n * Checks whether an instruction element node can be connected in sequence after another instruction\n * element node.\n * @param connectorNodeID - node ID of the connector instruction element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n * @returns - `true` if node connections are valid, else `false`\n */\nfunction attachInstructionBelowCheck(connectorNodeID, connectingNodeID) {\n    if (!_attachInstructionCheck(connectorNodeID, connectingNodeID)) {\n        return false;\n    }\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    const specificationConnector = (0, specification_1.queryElementSpecification)(nodeConnector.elementName);\n    const specificationConnecting = (0, specification_1.queryElementSpecification)(nodeConnecting.elementName);\n    if ((specificationConnector.forbidBelow &&\n        specificationConnector.forbidBelow.includes(nodeConnecting.elementName)) ||\n        (specificationConnecting.forbidAbove &&\n            specificationConnecting.forbidAbove.includes(nodeConnector.elementName))) {\n        return false;\n    }\n    if (specificationConnector.allowBelow !== undefined) {\n        if (specificationConnector.allowBelow instanceof Array) {\n            if (!specificationConnector.allowBelow.includes(nodeConnecting.elementName)) {\n                return false;\n            }\n        }\n        else {\n            if (specificationConnector.allowBelow === false) {\n                return false;\n            }\n        }\n    }\n    if (specificationConnecting.allowAbove !== undefined) {\n        if (specificationConnecting.allowAbove instanceof Array) {\n            if (!specificationConnecting.allowAbove.includes(nodeConnector.elementName)) {\n                return false;\n            }\n        }\n        else {\n            if (specificationConnector.allowAbove === false) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexports.attachInstructionBelowCheck = attachInstructionBelowCheck;\n/**\n * Attaches an instruction element node in sequence after another instruction element node.\n * @param connectorNodeID - node ID of the connector instruction element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n */\nfunction attachInstructionBelow(connectorNodeID, connectingNodeID) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.afterConnection = nodeConnecting;\n    nodeConnecting.beforeConnection = nodeConnector;\n    nodeConnecting.nestLevel = nodeConnector.nestLevel;\n    nodeConnecting.parentBlock = nodeConnector.parentBlock;\n    if (_syntaxTree.crumbs.includes(nodeConnecting)) {\n        _syntaxTree.crumbs.splice(_syntaxTree.crumbs.indexOf(nodeConnecting), 1);\n    }\n}\nexports.attachInstructionBelow = attachInstructionBelow;\n/**\n * Detaches an instruction element node from sequence after another instruction element node.\n * @param connectorNodeID - node ID of the connector instruction element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n */\nfunction detachInstructionBelow(connectorNodeID, connectingNodeID) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.afterConnection = null;\n    nodeConnecting.beforeConnection = null;\n    nodeConnecting.nestLevel = 0;\n    nodeConnecting.parentBlock = null;\n    _syntaxTree.crumbs.push(nodeConnecting);\n}\nexports.detachInstructionBelow = detachInstructionBelow;\n/**\n * Checks whether an instruction element node can be nested inside a block element node.\n * @param connectorNodeID - node ID of the connector block element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n * @returns - `true` if node connections are valid, else `false`\n */\nfunction attachInstructionInsideCheck(connectorNodeID, connectingNodeID) {\n    if (!_attachInstructionCheck(connectorNodeID, connectingNodeID)) {\n        return false;\n    }\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    const specificationConnector = (0, specification_1.queryElementSpecification)(nodeConnector.elementName);\n    const specificationConnecting = (0, specification_1.queryElementSpecification)(nodeConnecting.elementName);\n    if (!(specificationConnector.type === 'Block' &&\n        (specificationConnecting.type === 'Statement' ||\n            specificationConnecting.type === 'Block'))) {\n        return false;\n    }\n    if ((specificationConnector.forbidNestInside &&\n        specificationConnector.forbidNestInside.includes(nodeConnecting.elementName)) ||\n        (specificationConnecting.forbiddenNestInside &&\n            specificationConnecting.forbiddenNestInside.includes(nodeConnector.elementName))) {\n        return false;\n    }\n    if (specificationConnector.allowNestInside !== undefined) {\n        if (specificationConnector.allowNestInside instanceof Array) {\n            if (!specificationConnector.allowNestInside.includes(nodeConnecting.elementName)) {\n                return false;\n            }\n        }\n        else {\n            if (specificationConnector.allowNestInside === false) {\n                return false;\n            }\n        }\n    }\n    if (specificationConnecting.allowedNestInside !== undefined) {\n        if (specificationConnecting.allowedNestInside instanceof Array) {\n            if (!specificationConnecting.allowedNestInside.includes(nodeConnector.elementName)) {\n                return false;\n            }\n        }\n        else {\n            if (specificationConnector.allowedNestInside === false) {\n                return false;\n            }\n        }\n    }\n    if (!(specificationConnecting.allowedNestLevel &&\n        specificationConnecting.allowedNestLevel instanceof Array &&\n        specificationConnecting.allowedNestLevel.includes(nodeConnector.nestLevel + 1))) {\n        return false;\n    }\n    return true;\n}\nexports.attachInstructionInsideCheck = attachInstructionInsideCheck;\n/**\n * Attaches an instruction element node inside a block element node.\n * @param connectorNodeID - node ID of the connector block element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n */\nfunction attachInstructionInside(connectorNodeID, connectingNodeID) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.innerConnection = nodeConnecting;\n    nodeConnector.innerCount++;\n    nodeConnecting.parentBlock = nodeConnector;\n    nodeConnecting.nestLevel = nodeConnector.nestLevel + 1;\n    if (_syntaxTree.crumbs.includes(nodeConnecting)) {\n        _syntaxTree.crumbs.splice(_syntaxTree.crumbs.indexOf(nodeConnecting), 1);\n    }\n}\nexports.attachInstructionInside = attachInstructionInside;\n/**\n * Attaches an instruction element node from inside a block element node.\n * @param connectorNodeID - node ID of the connector block element node\n * @param connectingNodeID - node ID of the connecting instruction element node\n */\nfunction detachInstructionInside(connectorNodeID, connectingNodeID) {\n    const nodeConnector = _nodeMap[connectorNodeID];\n    const nodeConnecting = _nodeMap[connectingNodeID];\n    nodeConnector.innerConnection = null;\n    nodeConnector.innerCount--;\n    nodeConnecting.parentBlock = null;\n    nodeConnecting.nestLevel = 0;\n    _syntaxTree.crumbs.push(nodeConnecting);\n}\nexports.detachInstructionInside = detachInstructionInside;\n/**\n * Generates a snapshot of the syntax tree.\n * @returns syntax tree snapshot\n */\nfunction generateSnapshot() {\n    const snapshot = {\n        process: _syntaxTree.process.map((node) => node.snapshot),\n        routine: _syntaxTree.routine.map((node) => node.snapshot),\n        crumbs: [],\n    };\n    _syntaxTree.crumbs.forEach((node) => {\n        if (node instanceof node_1.TreeNodeData || node instanceof node_1.TreeNodeExpression) {\n            snapshot.crumbs.push([node.snapshot]);\n        }\n        else {\n            const snapshotList = [];\n            let nextNode = node;\n            while (nextNode !== null) {\n                snapshotList.push(nextNode.snapshot);\n                nextNode = nextNode.afterConnection;\n            }\n            snapshot.crumbs.push(snapshotList);\n        }\n    });\n    return snapshot;\n}\nexports.generateSnapshot = generateSnapshot;\n/**\n * Generates the syntax tree from a snapshot.\n * @param snapshot - syntax tree snapshot\n * @throws `InvalidDataError`\n */\nfunction generateFromSnapshot(snapshot) {\n    resetSyntaxTree();\n    function __generateSnapshotList(snapshotList) {\n        if (snapshotList.length === 0) {\n            return null;\n        }\n        const snapshotNodes = snapshotList.map((snapshot) => {\n            const specification = (0, specification_1.queryElementSpecification)(snapshot.elementName);\n            let nodeID;\n            switch (specification.type) {\n                case 'Data':\n                    nodeID = __generateFromSnapshotData(snapshot);\n                    break;\n                case 'Expression':\n                    nodeID = __generateFromSnapshotExpression(snapshot);\n                    break;\n                case 'Statement':\n                    nodeID = __generateFromSnapshotStatement(snapshot);\n                    break;\n                case 'Block':\n                default:\n                    nodeID = __generateFromSnapshotBlock(snapshot);\n            }\n            return nodeID;\n        });\n        if (snapshotNodes.length > 1) {\n            for (let i = 0; i < snapshotNodes.length - 1; i++) {\n                attachInstructionBelow(snapshotNodes[i], snapshotNodes[i + 1]);\n            }\n        }\n        return snapshotNodes[0];\n    }\n    function __generateFromSnapshotArg(nodeID, snapshot) {\n        if (snapshot === null) {\n            return;\n        }\n        Object.entries(snapshot).forEach(([argName, snapshot]) => {\n            if (snapshot === null) {\n                return;\n            }\n            let argNodeID;\n            const specification = (0, specification_1.queryElementSpecification)(snapshot.elementName);\n            if (specification.type === 'Data') {\n                argNodeID = __generateFromSnapshotData(snapshot);\n            }\n            else {\n                argNodeID = __generateFromSnapshotExpression(snapshot);\n            }\n            attachArgument(nodeID, argNodeID, argName);\n        });\n    }\n    function __generateFromSnapshotData(snapshot) {\n        const nodeID = addNode(snapshot.elementName);\n        if (snapshot.value) {\n            const instance = (0, warehouse_1.getInstance)(getNode(nodeID).instanceID).instance;\n            if ((0, specification_1.checkValueAssignment)(instance.name, snapshot.value)) {\n                instance.updateLabel(snapshot.value);\n            }\n            else {\n                throw Error(`InvalidDataError: value \"${snapshot.value}\" cannot be assigned to data element \"${instance.name}\"`);\n            }\n        }\n        return nodeID;\n    }\n    function __generateFromSnapshotExpression(snapshot) {\n        const nodeID = addNode(snapshot.elementName);\n        __generateFromSnapshotArg(nodeID, snapshot.argMap);\n        return nodeID;\n    }\n    function __generateFromSnapshotStatement(snapshot) {\n        const nodeID = addNode(snapshot.elementName);\n        __generateFromSnapshotArg(nodeID, snapshot.argMap);\n        return nodeID;\n    }\n    function __generateFromSnapshotBlock(snapshot) {\n        const nodeID = addNode(snapshot.elementName);\n        __generateFromSnapshotArg(nodeID, snapshot.argMap);\n        const innerNodeID = __generateSnapshotList(snapshot.scope);\n        if (innerNodeID !== null) {\n            attachInstructionInside(nodeID, innerNodeID);\n        }\n        return nodeID;\n    }\n    try {\n        snapshot.process.forEach((snapshot) => __generateFromSnapshotBlock(snapshot));\n        snapshot.routine.forEach((snapshot) => __generateFromSnapshotBlock(snapshot));\n        snapshot.crumbs.forEach((snapshotList) => __generateSnapshotList(snapshotList));\n    }\n    catch (e) {\n        resetSyntaxTree();\n        throw e;\n    }\n}\nexports.generateFromSnapshot = generateFromSnapshot;\n/**\n * Assigns the value (label) of the data element instance included in the node `nodeID`.\n * @param nodeID node ID of the syntax tree node\n * @param value value to assign\n * @returns whether successful assignment or not\n */\nfunction assignNodeValue(nodeID, value) {\n    try {\n        const instance = (0, warehouse_1.getInstance)(getNode(nodeID).instanceID).instance;\n        if (instance.type === 'Data' && (0, specification_1.checkValueAssignment)(instance.name, value)) {\n            instance.updateLabel(value);\n        }\n        else {\n            throw Error();\n        }\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.assignNodeValue = assignNodeValue;\n//# sourceMappingURL=syntaxTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flushAllVariables = exports.flushRoutineVariablesAll = exports.flushRoutineVariables = exports.flushProcessVariablesAll = exports.flushProcessVariables = exports.flushGlobalVariables = exports.removeRoutineVariable = exports.getRoutineVariableNamesWithTypesAll = exports.getRoutineVariableNamesAll = exports.getRoutineVariableNamesWithTypes = exports.getRoutineVariableNames = exports.getRoutineVariable = exports.addRoutineVariable = exports.removeProcessVariable = exports.getProcessVariableNamesWithTypesAll = exports.getProcessVariableNamesAll = exports.getProcessVariableNamesWithTypes = exports.getProcessVariableNames = exports.getProcessVariable = exports.addProcessVariable = exports.removeGlobalVariable = exports.getGlobalVariableNamesWithTypes = exports.getGlobalVariableNames = exports.getGlobalVariable = exports.addGlobalVariable = void 0;\n// -- private variables ----------------------------------------------------------------------------\n/** Stores the global table. */\nlet _globalTable = {};\n/** Stores the processes' tables. */\nlet _processTable = {};\n/** Stores the routines' table. */\nlet _routineTable = {};\n// -- private functions ----------------------------------------------------------------------------\n/**\n * A helper that adds a variable for a process or routine. If already present, overwrites it.\n * @param variable - name of the variable\n * @param dataType - data type of the variable\n * @param value - value of the variable\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n */\nfunction _addTableVariable(variable, dataType, value, selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    if (!(selector in table)) {\n        table[selector] = {};\n    }\n    table[selector][variable] = { dataType, value };\n}\n/**\n * A helper that fetches a variable for a process or routine.\n * @param variable - name of the variable\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n * @returns the variable entry if present, else `null`\n */\nfunction _getTableVariable(variable, selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    return selector in table && variable in table[selector] ? table[selector][variable] : null;\n}\n/**\n * A helper that returns names of all variables for a process or routine.\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n * @returns a list of all variable names for a process or routine\n */\nfunction _getTableVariableNames(selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    return selector in table ? Object.keys(table[selector]) : [];\n}\n/**\n * A helper that returns names of all variables for a process or routine with their data types.\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n * @returns an object with key-value pairs of variable names and corresponding data type\n */\nfunction _getTableVariableNamesWithTypes(selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    if (!(selector in table)) {\n        return {};\n    }\n    const res = {};\n    Object.entries(table[selector]).forEach(([variable, { dataType }]) => {\n        res[variable] = dataType;\n    });\n    return res;\n}\n/**\n * A helper that returns names of all process or routine variables.\n * @param tableName - `process` or `routine`\n * @returns an object with key-value pairs of process or routine names and corresponding list of\n * variable names\n */\nfunction _getTableVariableNamesAll(tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    const res = {};\n    Object.entries(table).forEach(([key, variables]) => {\n        res[key] = Object.keys(variables);\n    });\n    return res;\n}\n/**\n * A helper that returns names and types of all process or routine variables.\n * @param tableName - `process` or `routine`\n * @returns an object with key-value pairs of process or routine names and corresponding object with\n * key-value pairs of variable names and data types.\n */\nfunction _getTableVariableNamesWithTypesAll(tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    const res = {};\n    Object.entries(table).forEach(([key, variables]) => {\n        res[key] = {};\n        Object.entries(variables).forEach(([variable, { dataType }]) => {\n            res[key][variable] = dataType;\n        });\n    });\n    return res;\n}\n/**\n * Removes a variable for a process or routine if present.\n * @param variable - name of the variable\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n */\nfunction _removeTableVariable(variable, selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    if (selector in table && variable in table[selector]) {\n        delete table[selector][variable];\n    }\n}\n/**\n * A helper that clears all variables for a process or routine.\n * @param selector - the key to be used for selection (project ID or routine ID)\n * @param tableName - `process` or `routine`\n */\nfunction _flushTableVariables(selector, tableName) {\n    const table = tableName === 'process' ? _processTable : _routineTable;\n    if (selector in table) {\n        delete table[selector];\n    }\n}\n// -- public functions -----------------------------------------------------------------------------\n/**\n * Adds a global variable. If already present, overwrites it.\n * @param variable - name of the variable\n * @param dataType - data type of the variable\n * @param value - value of the variable\n */\nfunction addGlobalVariable(variable, dataType, value) {\n    _globalTable[variable] = { dataType, value };\n}\nexports.addGlobalVariable = addGlobalVariable;\n/**\n * Fetches a global variable.\n * @param variable - name of the variable\n * @returns the variable entry if present, else `null`\n */\nfunction getGlobalVariable(variable) {\n    return variable in _globalTable ? _globalTable[variable] : null;\n}\nexports.getGlobalVariable = getGlobalVariable;\n/**\n * Returns names of all global variables.\n * @returns a list of all global variable names\n */\nfunction getGlobalVariableNames() {\n    return Object.keys(_globalTable);\n}\nexports.getGlobalVariableNames = getGlobalVariableNames;\n/**\n * Returns names of all global variables with their data types.\n * @returns an object with key-value pairs of variable names and corresponding data type\n */\nfunction getGlobalVariableNamesWithTypes() {\n    const table = {};\n    Object.entries(_globalTable).forEach(([variable, { dataType }]) => {\n        table[variable] = dataType;\n    });\n    return table;\n}\nexports.getGlobalVariableNamesWithTypes = getGlobalVariableNamesWithTypes;\n/**\n * Removes a global variable if present.\n * @param variable - name of the variable\n */\nfunction removeGlobalVariable(variable) {\n    if (variable in _globalTable) {\n        delete _globalTable[variable];\n    }\n}\nexports.removeGlobalVariable = removeGlobalVariable;\n/**\n * Adds a variable for a process. If already present, overwrites it.\n * @param variable - name of the variable\n * @param dataType - data type of the variable\n * @param value - value of the variable\n * @param process - ID of the process\n */\nfunction addProcessVariable(variable, dataType, value, process) {\n    _addTableVariable(variable, dataType, value, process, 'process');\n}\nexports.addProcessVariable = addProcessVariable;\n/**\n * Fetches a variable for a process.\n * @param variable - name of the variable\n * @param process - ID of the process\n * @returns the variable entry if present, else `null`\n */\nfunction getProcessVariable(variable, process) {\n    return _getTableVariable(variable, process, 'process');\n}\nexports.getProcessVariable = getProcessVariable;\n/**\n * Returns names of all variables for a process.\n * @param process - ID of the process\n * @returns a list of all variable names for a process\n */\nfunction getProcessVariableNames(process) {\n    return _getTableVariableNames(process, 'process');\n}\nexports.getProcessVariableNames = getProcessVariableNames;\n/**\n * Returns names of all variables for a process with their data types.\n * @param process - ID of the process\n * @returns an object with key-value pairs of variable names and corresponding data type\n */\nfunction getProcessVariableNamesWithTypes(process) {\n    return _getTableVariableNamesWithTypes(process, 'process');\n}\nexports.getProcessVariableNamesWithTypes = getProcessVariableNamesWithTypes;\n/**\n * Returns names of all process variables.\n * @returns an object with key-value pairs of process names and corresponding list of variable\n * names\n */\nfunction getProcessVariableNamesAll() {\n    return _getTableVariableNamesAll('process');\n}\nexports.getProcessVariableNamesAll = getProcessVariableNamesAll;\n/**\n * Returns names and types of all process variables.\n * @returns an object with key-value pairs of process names and corresponding object with key-value\n * pairs of variable names and data types.\n */\nfunction getProcessVariableNamesWithTypesAll() {\n    return _getTableVariableNamesWithTypesAll('process');\n}\nexports.getProcessVariableNamesWithTypesAll = getProcessVariableNamesWithTypesAll;\n/**\n * Removes a variable for a process if present.\n * @param variable - name of the variable\n * @param process - ID of the process\n */\nfunction removeProcessVariable(variable, process) {\n    _removeTableVariable(variable, process, 'process');\n}\nexports.removeProcessVariable = removeProcessVariable;\n/**\n * Adds a variable for a routine. If already present, overwrites it.\n * @param variable - name of the variable\n * @param dataType - data type of the variable\n * @param value - value of the variable\n * @param routine - ID of the routine\n */\nfunction addRoutineVariable(variable, dataType, value, routine) {\n    _addTableVariable(variable, dataType, value, routine, 'routine');\n}\nexports.addRoutineVariable = addRoutineVariable;\n/**\n * Fetches a variable for a routine.\n * @param variable - name of the variable\n * @param routine - ID of the routine\n * @returns the variable entry if present, else `null`\n */\nfunction getRoutineVariable(variable, routine) {\n    return _getTableVariable(variable, routine, 'routine');\n}\nexports.getRoutineVariable = getRoutineVariable;\n/**\n * Returns names of all variables for a routine.\n * @param routine - ID of the routine\n * @returns a list of all variable names for a routine\n */\nfunction getRoutineVariableNames(routine) {\n    return _getTableVariableNames(routine, 'routine');\n}\nexports.getRoutineVariableNames = getRoutineVariableNames;\n/**\n * Returns names of all variables for a routine with their data types.\n * @param routine - ID of the routine\n * @returns an object with key-value pairs of variable names and corresponding data type\n */\nfunction getRoutineVariableNamesWithTypes(routine) {\n    return _getTableVariableNamesWithTypes(routine, 'routine');\n}\nexports.getRoutineVariableNamesWithTypes = getRoutineVariableNamesWithTypes;\n/**\n * Returns names of all routine variables.\n * @returns an object with key-value pairs of routine names and corresponding list of variable\n * names\n */\nfunction getRoutineVariableNamesAll() {\n    return _getTableVariableNamesAll('routine');\n}\nexports.getRoutineVariableNamesAll = getRoutineVariableNamesAll;\n/**\n * Returns names and types of all routine variables.\n * @returns an object with key-value pairs of routine names and corresponding object with key-value\n * pairs of variable names and data types.\n */\nfunction getRoutineVariableNamesWithTypesAll() {\n    return _getTableVariableNamesWithTypesAll('routine');\n}\nexports.getRoutineVariableNamesWithTypesAll = getRoutineVariableNamesWithTypesAll;\n/**\n * Removes a variable for a routine if present.\n * @param variable - name of the variable\n * @param routine - ID of the routine\n */\nfunction removeRoutineVariable(variable, routine) {\n    _removeTableVariable(variable, routine, 'routine');\n}\nexports.removeRoutineVariable = removeRoutineVariable;\n/**\n * Clears all global variables.\n */\nfunction flushGlobalVariables() {\n    _globalTable = {};\n}\nexports.flushGlobalVariables = flushGlobalVariables;\n/**\n * Clears all variables for a process.\n * @param process - 0 ID of the process\n */\nfunction flushProcessVariables(process) {\n    _flushTableVariables(process, 'process');\n}\nexports.flushProcessVariables = flushProcessVariables;\n/**\n * Clears all process variables.\n */\nfunction flushProcessVariablesAll() {\n    _processTable = {};\n}\nexports.flushProcessVariablesAll = flushProcessVariablesAll;\n/**\n * Clears all variables for a routine.\n * @param routine - ID of the routine\n */\nfunction flushRoutineVariables(routine) {\n    _flushTableVariables(routine, 'routine');\n}\nexports.flushRoutineVariables = flushRoutineVariables;\n/**\n * Clears all routine variables.\n */\nfunction flushRoutineVariablesAll() {\n    _routineTable = {};\n}\nexports.flushRoutineVariablesAll = flushRoutineVariablesAll;\n/**\n * Clears all variable tables.\n */\nfunction flushAllVariables() {\n    flushGlobalVariables();\n    flushProcessVariablesAll();\n    flushRoutineVariablesAll();\n}\nexports.flushAllVariables = flushAllVariables;\n//# sourceMappingURL=symbolTable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stackTrace = exports.getNextElement = exports.clearPCOverride = exports.setPCOverride = exports.getExecutionItem = exports.setExecutionItem = exports.generateArgumentSequence = exports.validateArgumentSequence = void 0;\nconst node_1 = require(\"../syntax/tree/node\");\nconst syntaxTree_1 = require(\"../syntax/tree/syntaxTree\");\nconst warehouse_1 = require(\"../syntax/warehouse/warehouse\");\n// -- private variables ----------------------------------------------------------------------------\n/** Stores the list of process element nodes. */\nlet _processNodes = [];\n/** Stores the list of routine element nodes. */\nlet _routineNodes = [];\n/** Stores the list of crumb stack top element nodes. */\nlet _crumbNodes = [];\n/** Maintains the parsing state tables. */\nlet _programMap = {\n    process: {},\n    routine: {},\n    crumbs: {},\n};\n/** Stores a reference to the starting node of parsing. */\nlet _executionItem = null;\n// -- private functions ----------------------------------------------------------------------------\n/**\n * Helper that resets the parser.\n */\nfunction _reset() {\n    _processNodes = (0, syntaxTree_1.getProcessNodes)();\n    _routineNodes = (0, syntaxTree_1.getRoutineNodes)();\n    _crumbNodes = (0, syntaxTree_1.getCrumbs)();\n    _programMap = {\n        process: {},\n        routine: {},\n        crumbs: {},\n    };\n    for (const processNode of _processNodes) {\n        _programMap['process'][processNode.nodeID] = {\n            frames: [],\n            pc: null,\n            pcHandler: [],\n            pcOverride: null,\n        };\n    }\n    for (const routineNode of _routineNodes) {\n        _programMap['routine'][routineNode.nodeID] = {\n            frames: [],\n            pc: null,\n            pcHandler: [],\n            pcOverride: null,\n        };\n    }\n    for (const crumbNode of _crumbNodes) {\n        _programMap['crumbs'][crumbNode.nodeID] = {\n            frames: [],\n            pc: null,\n            pcHandler: [],\n            pcOverride: null,\n        };\n    }\n    _executionItem = null;\n}\n// -- public functions -----------------------------------------------------------------------------\n/**\n * Recursively validates the argument sequence for a syntax tree instruction node. Checks if there\n * are `null` argument connections.\n * @param instructionNode - syntax tree instruction node\n * @returns `null` if valid, else an object of the invalid syntax tree non-data node and arg name.\n */\nfunction validateArgumentSequence(instructionNode) {\n    if (Object.keys(instructionNode.argConnections).length === 0) {\n        return null;\n    }\n    function __validateArgumentSequence(node) {\n        for (const [argName, argNode] of Object.entries(node.argConnections)) {\n            if (argNode === null) {\n                return {\n                    instruction: node,\n                    argName,\n                };\n            }\n            else {\n                if (argNode instanceof node_1.TreeNodeExpression) {\n                    const result = __validateArgumentSequence(argNode);\n                    if (result !== null) {\n                        return result;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    return __validateArgumentSequence(instructionNode);\n}\nexports.validateArgumentSequence = validateArgumentSequence;\n/**\n * Recursively generates the argument sequence for a syntax tree instruction node.\n * @description\n * Expects that argument sequence is valid — no `null` argument connections.\n * @param instructionNode - syntax tree instruction node\n * @returns a list of argument element instances\n */\nfunction generateArgumentSequence(instructionNode) {\n    if (Object.keys(instructionNode.argConnections).length === 0) {\n        return [];\n    }\n    function __generateArgumentSequence(node) {\n        let sequence = [];\n        Object.entries(node.argConnections).forEach(([_, argNode]) => {\n            if (argNode instanceof node_1.TreeNodeExpression) {\n                sequence = [...sequence, ...__generateArgumentSequence(argNode)];\n            }\n            sequence.push((0, warehouse_1.getInstance)(argNode.instanceID).instance);\n        });\n        return sequence;\n    }\n    return __generateArgumentSequence(instructionNode);\n}\nexports.generateArgumentSequence = generateArgumentSequence;\n/**\n * Sets the starting node of parsing.\n * @param nodeID - syntax tree node ID of the starting node.\n */\nfunction setExecutionItem(nodeID) {\n    _reset();\n    let executionItemEntry = undefined;\n    for (const processNode of _processNodes) {\n        if (processNode.nodeID === nodeID) {\n            _executionItem = { node: processNode, bucket: 'process' };\n            executionItemEntry = _programMap['process'][nodeID];\n            break;\n        }\n    }\n    for (const routineNode of _routineNodes) {\n        if (routineNode.nodeID === nodeID) {\n            _executionItem = { node: routineNode, bucket: 'routine' };\n            executionItemEntry = _programMap['routine'][nodeID];\n            break;\n        }\n    }\n    for (const crumbNode of _crumbNodes) {\n        if (crumbNode.nodeID === nodeID) {\n            _executionItem = { node: crumbNode, bucket: 'crumbs' };\n            executionItemEntry = _programMap['crumbs'][nodeID];\n            break;\n        }\n    }\n    if (executionItemEntry !== undefined) {\n        executionItemEntry.pc = _executionItem.node;\n        executionItemEntry.frames.push({\n            node: _executionItem.node,\n            pages: null,\n        });\n    }\n}\nexports.setExecutionItem = setExecutionItem;\n/**\n * Returns the starting syntax tree node ID of the starting node of parsing.\n * @returns - syntax tree node ID if present, else `null`\n */\nfunction getExecutionItem() {\n    return _executionItem ? _executionItem.node.nodeID : null;\n}\nexports.getExecutionItem = getExecutionItem;\n/**\n * Sets a program counter override signal for the current execution item.\n * @param signal - program counter override signal\n */\nfunction setPCOverride(signal) {\n    if (_executionItem === null) {\n        return;\n    }\n    _programMap[_executionItem.bucket][_executionItem.node.nodeID].pcOverride = signal;\n}\nexports.setPCOverride = setPCOverride;\n/**\n * Clears any program counter override signal for the current execution item.\n */\nfunction clearPCOverride() {\n    if (_executionItem === null) {\n        return;\n    }\n    _programMap[_executionItem.bucket][_executionItem.node.nodeID].pcOverride = null;\n}\nexports.clearPCOverride = clearPCOverride;\n/**\n * Returns the next node in execution sequence.\n * @returns - element entry if present, else `null`\n */\nfunction getNextElement() {\n    if (_executionItem === null) {\n        /*\n         * Nothing to execute\n         */\n        return null;\n    }\n    const executionItemEntry = _programMap[_executionItem.bucket][_executionItem.node.nodeID];\n    if (executionItemEntry.pcHandler !== null) {\n        executionItemEntry.pcHandler.forEach((handler) => handler());\n        executionItemEntry.pcHandler = [];\n    }\n    const currentNode = executionItemEntry.pc;\n    const frames = executionItemEntry.frames;\n    if (currentNode === null) {\n        if (frames.length === 0) {\n            /*\n             * Successful end of execution\n             */\n            _reset();\n            return null;\n        }\n        else {\n            /*\n             * ERROR: Missing argument\n             */\n            const frame = frames[frames.length - 2];\n            throw Error(`Invalid access: \"${frame.pages[frame.pages.length - 1].marker}\" of \"${frame.node.elementName}\" (node ID: \"${frame.node.nodeID}\")`);\n        }\n    }\n    const instance = (0, warehouse_1.getInstance)(currentNode.instanceID).instance;\n    function __handlePages() {\n        const frame = frames[frames.length - 1];\n        if (frame.pages === null) {\n            frame.pages = [];\n            Object.entries(currentNode\n                .argConnections).forEach(([argName, argNode]) => frame.pages.push({\n                node: argNode,\n                marker: argName,\n            }));\n            frame.pages = frame.pages.reverse();\n        }\n        if (frame.pages.length !== 0) {\n            if (frame.pages[0].marker === '__rollback__') {\n                executionItemEntry.pcHandler.push(() => {\n                    if (executionItemEntry.pcOverride !== '__goinnerfirst__') {\n                        frames.pop();\n                    }\n                });\n                return { marker: '__rollback__' };\n            }\n            const upcomingNode = frame.pages[frame.pages.length - 1].node;\n            executionItemEntry.pcHandler.push(() => {\n                frames.push({\n                    node: upcomingNode,\n                    pages: null,\n                });\n                executionItemEntry.pc = upcomingNode;\n            });\n            return { element: getNextElement() };\n        }\n        else {\n            if (currentNode instanceof node_1.TreeNodeBlock) {\n                frame.pages = [\n                    {\n                        node: currentNode,\n                        marker: '__rollback__',\n                    },\n                ];\n                __handleInstructionFall(true);\n                return {\n                    element: {\n                        type: 'Instruction',\n                        instance: instance,\n                        marker: null,\n                    },\n                };\n            }\n            frames.pop();\n            let marker = null;\n            if (currentNode instanceof node_1.TreeNodeExpression && frames.length !== 0) {\n                const topFramePages = frames[frames.length - 1].pages;\n                marker = topFramePages[topFramePages.length - 1].marker;\n                frames[frames.length - 1].pages.pop();\n            }\n            return { marker };\n        }\n    }\n    function __handleInstructionFall(goInner) {\n        executionItemEntry.pcHandler.push(() => {\n            let nextNode = currentNode.afterConnection;\n            if (currentNode instanceof node_1.TreeNodeBlock) {\n                if (goInner || executionItemEntry.pcOverride === '__goinnerfirst__') {\n                    nextNode = currentNode.innerConnection;\n                }\n                if (executionItemEntry.pcOverride === '__goinnerlast__') {\n                    nextNode = currentNode.innerConnection;\n                    while (nextNode !== null && nextNode.afterConnection !== null) {\n                        nextNode = nextNode.afterConnection;\n                    }\n                }\n                else if (executionItemEntry.pcOverride === '__skipscope__') {\n                    frames[frames.length - 1].pages = [\n                        {\n                            node: currentNode,\n                            marker: '__rollback__',\n                        },\n                    ];\n                    nextNode = null;\n                }\n            }\n            if (executionItemEntry.pcOverride === '__goup__') {\n                nextNode = currentNode.beforeConnection;\n            }\n            else if (executionItemEntry.pcOverride === '__skip__') {\n                nextNode = currentNode.afterConnection;\n                if (nextNode !== null) {\n                    nextNode = nextNode.afterConnection;\n                }\n            }\n            else if (executionItemEntry.pcOverride === '__repeat__') {\n                nextNode = currentNode;\n            }\n            else if (executionItemEntry.pcOverride === '__rollback__' ||\n                executionItemEntry.pcOverride === '__rollback__i') {\n                if (frames.length > 0) {\n                    frames[frames.length - 1].pages = [\n                        {\n                            node: currentNode,\n                            marker: '__rollback__',\n                        },\n                    ];\n                }\n                nextNode = null;\n            }\n            if (executionItemEntry.pcOverride !== '__rollback__i') {\n                executionItemEntry.pcOverride = null;\n            }\n            if (nextNode === null) {\n                if (frames.length !== 0) {\n                    executionItemEntry.pc = frames[frames.length - 1].node;\n                }\n                else {\n                    executionItemEntry.pc = nextNode;\n                }\n            }\n            else {\n                frames.push({\n                    node: nextNode,\n                    pages: null,\n                });\n                executionItemEntry.pc = nextNode;\n            }\n        });\n    }\n    if (currentNode instanceof node_1.TreeNodeData) {\n        frames.pop();\n        let marker = null;\n        if (frames.length !== 0) {\n            const topFramePages = frames[frames.length - 1].pages;\n            marker = topFramePages[topFramePages.length - 1].marker;\n            frames[frames.length - 1].pages.pop();\n        }\n        const element = {\n            type: 'Argument',\n            instance: instance,\n            marker,\n        };\n        executionItemEntry.pcHandler.push(() => {\n            executionItemEntry.pc = currentNode.connectedTo;\n        });\n        return element;\n    }\n    else if (currentNode instanceof node_1.TreeNodeExpression) {\n        const result = __handlePages();\n        if ('element' in result) {\n            return result.element;\n        }\n        const element = {\n            type: 'Argument',\n            instance: instance,\n            marker: result.marker,\n        };\n        executionItemEntry.pcHandler.push(() => {\n            executionItemEntry.pc = currentNode.connectedTo;\n        });\n        return element;\n    } /* currentNode instanceof TreeNodeStatement || currentNode instanceof TreeNodeBlock */\n    else {\n        const result = __handlePages();\n        if ('element' in result) {\n            return result.element;\n        }\n        __handleInstructionFall();\n        return {\n            type: 'Instruction',\n            instance: currentNode instanceof node_1.TreeNodeStatement\n                ? instance\n                : instance,\n            marker: result.marker,\n        };\n    }\n}\nexports.getNextElement = getNextElement;\n/**\n * Returns the execution call frame stack of the current execution item.\n * @returns a list of execution call frames if execution item is set, else `null`\n */\nfunction stackTrace() {\n    if (_executionItem === null) {\n        return null;\n    }\n    const executionItemEntry = _programMap[_executionItem.bucket][_executionItem.node.nodeID];\n    const currentNode = executionItemEntry.pc;\n    return [\n        ...executionItemEntry.frames.map(({ node, pages }) => ({\n            elementName: node ? node.elementName : null,\n            nodeID: node ? node.nodeID : null,\n            pages: pages\n                ? pages.map(({ node, marker }) => ({\n                    elementName: node ? node.elementName : null,\n                    nodeID: node ? node.nodeID : null,\n                    marker,\n                }))\n                : null,\n        })),\n        {\n            elementName: currentNode ? currentNode.elementName : null,\n            nodeID: currentNode ? currentNode.nodeID : null,\n            pages: null,\n        },\n    ].reverse();\n}\nexports.stackTrace = stackTrace;\n_reset();\n//# sourceMappingURL=parser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = exports.releaseProgramCounter = exports.overrideProgramCounter = exports.queryVariable = exports.declareVariable = void 0;\nconst symbolTable_1 = require(\"./symbolTable\");\nconst parser_1 = require(\"./parser\");\nconst elementArgument_1 = require(\"../syntax/elements/elementArgument\");\nconst elementInstruction_1 = require(\"../syntax/elements/elementInstruction\");\nfunction declareVariable(variable, dataType, value) {\n    (0, symbolTable_1.addGlobalVariable)(variable, dataType, value);\n}\nexports.declareVariable = declareVariable;\n/**\n * Fetches a variable entry from the symbol table.\n * @param variable name of the variable\n * @returns the variable entry if present, else `null`\n */\nfunction queryVariable(variable) {\n    return (0, symbolTable_1.getGlobalVariable)(variable);\n}\nexports.queryVariable = queryVariable;\n/**\n * Sets a program counter override signal for the current execution item.\n * @param signal program counter override signal\n */\nfunction overrideProgramCounter(signal) {\n    (0, parser_1.setPCOverride)(signal);\n}\nexports.overrideProgramCounter = overrideProgramCounter;\n/**\n * Clears any program counter override signal for the current execution item.\n */\nfunction releaseProgramCounter() {\n    (0, parser_1.clearPCOverride)();\n}\nexports.releaseProgramCounter = releaseProgramCounter;\n/**\n * Runs a process, routine, or crumb stack from start to end.\n * @param nodeID syntax tree node ID of the starting node\n */\nfunction run(nodeID) {\n    class ElementDataCover extends elementArgument_1.ElementData {\n    }\n    class ElementExpressionCover extends elementArgument_1.ElementExpression {\n    }\n    (0, parser_1.setExecutionItem)(nodeID);\n    const memo = {};\n    function __execute() {\n        const element = (0, parser_1.getNextElement)();\n        if (element === null) {\n            return;\n        }\n        const { instance, type, marker } = element;\n        if (type === 'Argument') {\n            if (instance instanceof ElementDataCover) {\n                instance.evaluate();\n            } /* instance instanceof ElementExpressionCover */\n            else {\n                instance.evaluate(memo);\n            }\n            const value = instance.value;\n            if (marker !== null) {\n                memo[marker] = value;\n            }\n        }\n        else {\n            if (instance instanceof elementInstruction_1.ElementStatement) {\n                instance.onVisit(memo);\n            } /* instance instanceof ElementBlock */\n            else {\n                if (marker !== '__rollback__') {\n                    instance.onVisit(memo);\n                }\n                else {\n                    instance.onExit();\n                }\n            }\n        }\n        __execute();\n    }\n    __execute();\n}\nexports.run = run;\n//# sourceMappingURL=interpreter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementValueString = exports.ElementValueNumber = exports.ElementValueBoolean = void 0;\nconst elementArgument_1 = require(\"../../syntax/elements/elementArgument\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Generic class that defines a generic value element.\n *\n * @classdesc\n * Value elements return a stored value.\n */\nclass ElementValue extends elementArgument_1.ElementData {\n    constructor(name, label, returnType, initialValue) {\n        super(name, '', {}, returnType, initialValue);\n        this.updateLabel(label);\n    }\n    /** @throws `Error` (TypeMismatchError) */\n    evaluate() {\n        switch (this.returnType[0]) {\n            case 'boolean':\n                if (this.label === 'true' || this.label === 'false') {\n                    this._value = (this.label === 'true');\n                }\n                else {\n                    throw Error(`TypeMismatchError: ${this.label} is not of type \"boolean\"`);\n                }\n                break;\n            case 'number':\n                if (!isNaN(Number(this.label))) {\n                    this._value = Number(this.label);\n                }\n                else {\n                    throw Error(`TypeMismatchError: ${this.label} is not of type \"number\"`);\n                }\n                break;\n            case 'string':\n            default:\n                this._value = this.label;\n        }\n    }\n}\n/**\n * @class\n * Defines a value element that stores a boolean value.\n * @throws `Error` (TypeMismatchError)\n */\nclass ElementValueBoolean extends ElementValue {\n    constructor(name, label) {\n        super(name, label, ['boolean'], true);\n    }\n}\nexports.ElementValueBoolean = ElementValueBoolean;\n/**\n * @class\n * Defines a value element that stores a number value.\n * @throws `Error` (TypeMismatchError)\n */\nclass ElementValueNumber extends ElementValue {\n    constructor(name, label) {\n        super(name, label, ['number'], 0);\n    }\n}\nexports.ElementValueNumber = ElementValueNumber;\n/**\n * @class\n * Defines a value element that stores a string value.\n * @throws `Error` (TypeMismatchError)\n */\nclass ElementValueString extends ElementValue {\n    constructor(name, label) {\n        super(name, label, ['string'], '');\n    }\n}\nexports.ElementValueString = ElementValueString;\n//# sourceMappingURL=elementValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementBoxString = exports.ElementBoxNumber = exports.ElementBoxBoolean = exports.ElementBoxGeneric = void 0;\nconst elementInstruction_1 = require(\"../../syntax/elements/elementInstruction\");\nconst interpreter_1 = require(\"../../execution/interpreter\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Generic class that defines a literally generic box element.\n *\n * @classdesc\n * Box elements add (declare) variables to the symbol table.\n */\nclass ElementBox extends elementInstruction_1.ElementStatement {\n    constructor(name, label, types) {\n        super(name, label, {\n            name: ['string'],\n            value: types,\n        });\n    }\n    /** @override */\n    onVisit(params) {\n        switch (typeof params.value) {\n            case 'boolean':\n                (0, interpreter_1.declareVariable)(params.name, 'boolean', params.value);\n                break;\n            case 'number':\n                (0, interpreter_1.declareVariable)(params.name, 'number', params.value);\n                break;\n            case 'string':\n                (0, interpreter_1.declareVariable)(params.name, 'string', params.value);\n                break;\n            default:\n                throw Error('Trespassing access: This should never be reached');\n        }\n    }\n}\n/**\n * @class\n * Defines a box element that declares a variable of any data type.\n */\nclass ElementBoxGeneric extends ElementBox {\n    constructor(name, label) {\n        super(name, label, ['boolean', 'number', 'string']);\n    }\n    /** @override */\n    onVisit(params) {\n        super.onVisit(params);\n    }\n}\nexports.ElementBoxGeneric = ElementBoxGeneric;\n/**\n * @class\n * Defines a box element that declares a variable of boolean type.\n */\nclass ElementBoxBoolean extends ElementBox {\n    constructor(name, label) {\n        super(name, label, ['boolean']);\n    }\n    /** @override */\n    onVisit(params) {\n        super.onVisit(params);\n    }\n}\nexports.ElementBoxBoolean = ElementBoxBoolean;\n/**\n * @class\n * Defines a box element that declares a variable of number type.\n */\nclass ElementBoxNumber extends ElementBox {\n    constructor(name, label) {\n        super(name, label, ['number']);\n    }\n    /** @override */\n    onVisit(params) {\n        super.onVisit(params);\n    }\n}\nexports.ElementBoxNumber = ElementBoxNumber;\n/**\n * @class\n * Defines a box element that declares a variable of string type.\n */\nclass ElementBoxString extends ElementBox {\n    constructor(name, label) {\n        super(name, label, ['string']);\n    }\n    /** @override */\n    onVisit(params) {\n        super.onVisit(params);\n    }\n}\nexports.ElementBoxString = ElementBoxString;\n//# sourceMappingURL=elementBox.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementBoxIdentifierString = exports.ElementBoxIdentifierNumber = exports.ElementBoxIdentifierBoolean = exports.ElementBoxIdentifierGeneric = void 0;\nconst elementArgument_1 = require(\"../../syntax/elements/elementArgument\");\nconst interpreter_1 = require(\"../../execution/interpreter\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @virtual\n * @class\n * Generic class that defines a literally generic box identifier element.\n * @classdesc\n * Box identifier elements fetch variables according to their label from the symbol table.\n * @throws `Error` (ItemNotFoundError)\n */\nclass ElementBoxIdentifier extends elementArgument_1.ElementData {\n    constructor(name, label, returnType, initialValue) {\n        super(name, label, {}, returnType, initialValue);\n    }\n    /** @override */\n    evaluate() {\n        const expectedType = typeof this._value;\n        try {\n            const { dataType, value } = (0, interpreter_1.queryVariable)(this.label);\n            if (this.returnType.length > 1) {\n                this._value = value;\n            }\n            else if (dataType === expectedType) {\n                this._value = value;\n            }\n            else {\n                throw Error('');\n            }\n        }\n        catch (e) {\n            if (this.returnType.length > 1) {\n                throw Error(`ItemNotFoundError: box \"${this.label}\" does not exist`);\n            }\n            else {\n                throw Error(`ItemNotFoundError: box \"${this.label}\" of type \"${expectedType}\" does not exist`);\n            }\n        }\n    }\n}\n/**\n * @class\n * Defines a box identifier element that fetches a variable of any data type based on presence.\n * @throws `Error` (ItemNotFoundError)\n */\nclass ElementBoxIdentifierGeneric extends ElementBoxIdentifier {\n    constructor(name, label) {\n        super(name, label, ['boolean', 'number', 'string'], '');\n    }\n}\nexports.ElementBoxIdentifierGeneric = ElementBoxIdentifierGeneric;\n/**\n * @class\n * Defines a box identifier element that fetches a variable of boolean type based on presence.\n * @throws `Error` (ItemNotFoundError)\n */\nclass ElementBoxIdentifierBoolean extends ElementBoxIdentifier {\n    constructor(name, label) {\n        super(name, label, ['boolean'], true);\n    }\n}\nexports.ElementBoxIdentifierBoolean = ElementBoxIdentifierBoolean;\n/**\n * @class\n * Defines a box identifier element that fetches a variable of number type based on presence.\n * @throws `Error` (ItemNotFoundError)\n */\nclass ElementBoxIdentifierNumber extends ElementBoxIdentifier {\n    constructor(name, label) {\n        super(name, label, ['number'], 0);\n    }\n}\nexports.ElementBoxIdentifierNumber = ElementBoxIdentifierNumber;\n/**\n * @class\n * Defines a box identifier element that fetches a variable of string type based on presence.\n * @throws `Error` (ItemNotFoundError)\n */\nclass ElementBoxIdentifierString extends ElementBoxIdentifier {\n    constructor(name, label) {\n        super(name, label, ['string'], '');\n    }\n}\nexports.ElementBoxIdentifierString = ElementBoxIdentifierString;\n//# sourceMappingURL=elementBoxIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementOperatorMathModulus = exports.ElementOperatorMathDivide = exports.ElementOperatorMathTimes = exports.ElementOperatorMathMinus = exports.ElementOperatorMathPlus = void 0;\nconst elementArgument_1 = require(\"../../syntax/elements/elementArgument\");\n/**\n * @virtual\n * @class\n * Generic class that defines a generic math operator element.\n *\n * @classdesc\n * Math operator elements are expression elements that take two arguments (operands) and return the\n * result of operation on those arguments.\n */\nclass ElementOperatorMath extends elementArgument_1.ElementExpression {\n    constructor(name, label, returnType, operator, initialValue) {\n        super(name, '', { operand1: returnType, operand2: returnType }, returnType, initialValue);\n        this._operator = operator;\n        this.updateLabel(this._operator);\n    }\n    evaluate(params) {\n        const { operand1, operand2 } = params;\n        switch (this._operator) {\n            case '+':\n                this._value = (typeof operand1 === 'string' || typeof operand2 === 'string'\n                    ? `${operand1}${operand2}`\n                    : operand1 + operand2);\n                break;\n            case '-':\n                this._value = (operand1 - operand2);\n                break;\n            case '*':\n                this._value = (operand1 * operand2);\n                break;\n            case '/':\n                this._value = (operand1 / operand2);\n                break;\n            case '%':\n                this._value = (operand1 % operand2);\n                break;\n        }\n    }\n}\n/**\n * @class\n * Defines a plus math-operator element.\n *\n * @classdesc\n * Performs addition on numbers and concatenation on strings.\n */\nclass ElementOperatorMathPlus extends ElementOperatorMath {\n    constructor(name, label) {\n        super(name, label, ['number', 'string'], '+', 0);\n    }\n}\nexports.ElementOperatorMathPlus = ElementOperatorMathPlus;\n/**\n * @class\n * Defines a minus math-operator element.\n *\n * @classdesc\n * Performs subtraction on numbers.\n */\nclass ElementOperatorMathMinus extends ElementOperatorMath {\n    constructor(name, label) {\n        super(name, label, ['number'], '-', 0);\n    }\n}\nexports.ElementOperatorMathMinus = ElementOperatorMathMinus;\n/**\n * @class\n * Defines a times math-operator element.\n *\n * @classdesc\n * Performs multiplication on numbers.\n */\nclass ElementOperatorMathTimes extends ElementOperatorMath {\n    constructor(name, label) {\n        super(name, label, ['number'], '*', 0);\n    }\n}\nexports.ElementOperatorMathTimes = ElementOperatorMathTimes;\n/**\n * @class\n * Defines a divide math-operator element.\n *\n * @classdesc\n * Performs division on numbers.\n */\nclass ElementOperatorMathDivide extends ElementOperatorMath {\n    constructor(name, label) {\n        super(name, label, ['number'], '/', 0);\n    }\n}\nexports.ElementOperatorMathDivide = ElementOperatorMathDivide;\n/**\n * @class\n * Defines a modulus math-operator element.\n *\n * @classdesc\n * Performs modulus operation on numbers.\n */\nclass ElementOperatorMathModulus extends ElementOperatorMath {\n    constructor(name, label) {\n        super(name, label, ['number'], '%', 0);\n    }\n}\nexports.ElementOperatorMathModulus = ElementOperatorMathModulus;\n//# sourceMappingURL=elementOperatorMath.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementRepeat = void 0;\nconst elementInstruction_1 = require(\"../../syntax/elements/elementInstruction\");\nconst interpreter_1 = require(\"../../execution/interpreter\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @class\n * Defines a repeat block element.\n * @classdesc\n * Repeats the scope as many times as the parameter provided.\n */\nclass ElementRepeat extends elementInstruction_1.ElementBlock {\n    constructor(name, label) {\n        super(name, label, { times: ['number'] });\n        this._counter = 0;\n    }\n    onVisit(params) {\n        this._counter = params.times;\n    }\n    onInnerVisit() {\n        // no use\n    }\n    onInnerExit() {\n        // no use\n    }\n    onExit() {\n        this._counter--;\n        if (this._counter !== 0) {\n            (0, interpreter_1.overrideProgramCounter)('__goinnerfirst__');\n        }\n    }\n}\nexports.ElementRepeat = ElementRepeat;\n//# sourceMappingURL=elementLoop.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementIf = void 0;\nconst elementInstruction_1 = require(\"../../syntax/elements/elementInstruction\");\nconst interpreter_1 = require(\"../../execution/interpreter\");\n// -------------------------------------------------------------------------------------------------\n/**\n * @class\n * Defines an If block element.\n * @classdesc\n * Allows entry to scope only if condition is satisfied.\n */\nclass ElementIf extends elementInstruction_1.ElementBlock {\n    constructor(name, label) {\n        super(name, label, { condition: ['boolean'] });\n    }\n    onVisit(params) {\n        if (!params.condition) {\n            (0, interpreter_1.overrideProgramCounter)('__skipscope__');\n        }\n    }\n    onInnerVisit() {\n        // no use\n    }\n    onInnerExit() {\n        // no use\n    }\n    onExit() {\n        // no use\n    }\n}\nexports.ElementIf = ElementIf;\n//# sourceMappingURL=elementConditional.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementRoutine = exports.ElementProcess = void 0;\nconst elementInstruction_1 = require(\"../../syntax/elements/elementInstruction\");\nclass ElementProcess extends elementInstruction_1.ElementBlock {\n    constructor(name, label) {\n        super(name, label, {});\n    }\n    onVisit() {\n        1;\n    }\n    onInnerVisit() {\n        1;\n    }\n    onInnerExit() {\n        1;\n    }\n    onExit() {\n        1;\n    }\n}\nexports.ElementProcess = ElementProcess;\nclass ElementRoutine extends elementInstruction_1.ElementBlock {\n    constructor(name, label) {\n        super(name, label, { name: ['string'] });\n    }\n    onVisit() {\n        1;\n    }\n    onInnerVisit() {\n        1;\n    }\n    onInnerExit() {\n        1;\n    }\n    onExit() {\n        1;\n    }\n}\nexports.ElementRoutine = ElementRoutine;\n//# sourceMappingURL=elementProgram.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementPrint = void 0;\nconst elementInstruction_1 = require(\"../../syntax/elements/elementInstruction\");\n// -------------------------------------------------------------------------------------------------\nclass ElementPrint extends elementInstruction_1.ElementStatement {\n    constructor(name, label) {\n        super(name, label, { value: ['boolean', 'number', 'string'] });\n    }\n    onVisit(params) {\n        // eslint-disable-next-line no-console\n        console.log(params.value);\n    }\n}\nexports.ElementPrint = ElementPrint;\n//# sourceMappingURL=elementPrint.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst elementValue_1 = require(\"./elements/elementValue\");\nconst elementBox_1 = require(\"./elements/elementBox\");\nconst elementBoxIdentifier_1 = require(\"./elements/elementBoxIdentifier\");\nconst elementOperatorMath_1 = require(\"./elements/elementOperatorMath\");\nconst elementLoop_1 = require(\"./elements/elementLoop\");\nconst elementConditional_1 = require(\"./elements/elementConditional\");\nconst elementProgram_1 = require(\"./elements/elementProgram\");\nconst elementPrint_1 = require(\"./elements/elementPrint\");\n// -------------------------------------------------------------------------------------------------\n/** Stores element specification data entries for factory list of syntax elements. */\nconst _elementSpecificationEntries = {\n    // -- value elements ---------------------------------------------------------------------------\n    'value-boolean': {\n        label: 'true',\n        type: 'Data',\n        category: 'value',\n        prototype: elementValue_1.ElementValueBoolean,\n        values: {\n            types: ['boolean'],\n        },\n    },\n    'value-number': {\n        label: '0',\n        type: 'Data',\n        category: 'value',\n        prototype: elementValue_1.ElementValueNumber,\n        values: {\n            types: ['number'],\n        },\n    },\n    'value-string': {\n        label: 'string',\n        type: 'Data',\n        category: 'value',\n        prototype: elementValue_1.ElementValueString,\n    },\n    // -- box elements -----------------------------------------------------------------------------\n    'box-generic': {\n        label: 'Box',\n        type: 'Statement',\n        category: 'box',\n        prototype: elementBox_1.ElementBoxGeneric,\n    },\n    'box-boolean': {\n        label: 'Box (boolean)',\n        type: 'Statement',\n        category: 'box',\n        prototype: elementBox_1.ElementBoxBoolean,\n    },\n    'box-number': {\n        label: 'Box (number)',\n        type: 'Statement',\n        category: 'box',\n        prototype: elementBox_1.ElementBoxNumber,\n    },\n    'box-string': {\n        label: 'Box (string)',\n        type: 'Statement',\n        category: 'box',\n        prototype: elementBox_1.ElementBoxString,\n    },\n    // -- box identifier elements ------------------------------------------------------------------\n    'boxidentifier-generic': {\n        label: 'Box 1',\n        type: 'Data',\n        category: 'boxidentifier',\n        prototype: elementBoxIdentifier_1.ElementBoxIdentifierGeneric,\n    },\n    'boxidentifier-boolean': {\n        label: 'Box 1',\n        type: 'Data',\n        category: 'boxidentifier',\n        prototype: elementBoxIdentifier_1.ElementBoxIdentifierBoolean,\n    },\n    'boxidentifier-number': {\n        label: 'Box 1',\n        type: 'Data',\n        category: 'boxidentifier',\n        prototype: elementBoxIdentifier_1.ElementBoxIdentifierNumber,\n    },\n    'boxidentifier-string': {\n        label: 'Box 1',\n        type: 'Data',\n        category: 'boxidentifier',\n        prototype: elementBoxIdentifier_1.ElementBoxIdentifierString,\n    },\n    // -- math operator elements -------------------------------------------------------------------\n    'operator-math-plus': {\n        label: '+',\n        type: 'Expression',\n        category: 'operator-math',\n        prototype: elementOperatorMath_1.ElementOperatorMathPlus,\n    },\n    'operator-math-minus': {\n        label: '-',\n        type: 'Expression',\n        category: 'operator-math',\n        prototype: elementOperatorMath_1.ElementOperatorMathMinus,\n    },\n    'operator-math-times': {\n        label: '\\u00d7',\n        type: 'Expression',\n        category: 'operator-math',\n        prototype: elementOperatorMath_1.ElementOperatorMathTimes,\n    },\n    'operator-math-divide': {\n        label: '\\u00f7',\n        type: 'Expression',\n        category: 'operator-math',\n        prototype: elementOperatorMath_1.ElementOperatorMathDivide,\n    },\n    'operator-math-modulus': {\n        label: '%',\n        type: 'Expression',\n        category: 'operator-math',\n        prototype: elementOperatorMath_1.ElementOperatorMathModulus,\n    },\n    // -- loop elements ----------------------------------------------------------------------------\n    'repeat': {\n        label: 'repeat',\n        type: 'Block',\n        category: 'loop',\n        prototype: elementLoop_1.ElementRepeat,\n    },\n    // -- conditional elements ---------------------------------------------------------------------\n    'if': {\n        label: 'if',\n        type: 'Block',\n        category: 'loop',\n        prototype: elementConditional_1.ElementIf,\n    },\n    // -- program elements -------------------------------------------------------------------------\n    'process': {\n        label: 'start',\n        type: 'Block',\n        category: 'program',\n        prototype: elementProgram_1.ElementProcess,\n        allowAbove: false,\n        allowBelow: false,\n    },\n    'routine': {\n        label: 'action',\n        type: 'Block',\n        category: 'program',\n        prototype: elementProgram_1.ElementRoutine,\n        allowAbove: false,\n        allowBelow: false,\n    },\n    // -- print element ----------------------------------------------------------------------------\n    'print': {\n        label: 'print',\n        type: 'Statement',\n        category: 'print',\n        prototype: elementPrint_1.ElementPrint,\n    },\n};\nexports.default = _elementSpecificationEntries;\n//# sourceMappingURL=specification.js.map","\"use strict\";\n// == SYNTAX =======================================================================================\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementOperatorMathMinus = exports.ElementOperatorMathPlus = exports.ElementBoxIdentifierString = exports.ElementBoxIdentifierNumber = exports.ElementBoxIdentifierBoolean = exports.ElementBoxIdentifierGeneric = exports.ElementBoxString = exports.ElementBoxNumber = exports.ElementBoxBoolean = exports.ElementBoxGeneric = exports.ElementValueString = exports.ElementValueNumber = exports.ElementValueBoolean = exports.librarySpecification = exports.run = exports.releaseProgramCounter = exports.overrideProgramCounter = exports.queryVariable = exports.declareVariable = exports.getCategoryCountAll = exports.getCategoryCount = exports.getKindCountAll = exports.getKindCount = exports.getTypeCountAll = exports.getTypeCount = exports.getNameCountAll = exports.getNameCount = exports.getInstance = exports.assignNodeValue = exports.resetSyntaxTree = exports.generateFromSnapshot = exports.generateSnapshot = exports.getNode = exports.getCrumbs = exports.getRoutineNodes = exports.getProcessNodes = exports.checkValueAssignment = exports.getSpecificationSnapshot = exports.resetElementSpecificationTable = exports.getElementCategories = exports.getElementNames = exports.queryElementSpecification = exports.removeElementSpecificationEntries = exports.removeElementSpecificationEntry = exports.registerElementSpecificationEntries = exports.registerElementSpecificationEntry = exports.ElementBlock = exports.ElementStatement = exports.ElementExpression = exports.ElementData = void 0;\nexports.ElementRoutine = exports.ElementProcess = exports.ElementPrint = exports.ElementRepeat = exports.ElementIf = exports.ElementOperatorMathModulus = exports.ElementOperatorMathDivide = exports.ElementOperatorMathTimes = void 0;\nvar elementArgument_1 = require(\"./syntax/elements/elementArgument\");\nObject.defineProperty(exports, \"ElementData\", { enumerable: true, get: function () { return elementArgument_1.ElementData; } });\nObject.defineProperty(exports, \"ElementExpression\", { enumerable: true, get: function () { return elementArgument_1.ElementExpression; } });\nvar elementInstruction_1 = require(\"./syntax/elements/elementInstruction\");\nObject.defineProperty(exports, \"ElementStatement\", { enumerable: true, get: function () { return elementInstruction_1.ElementStatement; } });\nObject.defineProperty(exports, \"ElementBlock\", { enumerable: true, get: function () { return elementInstruction_1.ElementBlock; } });\nvar specification_1 = require(\"./syntax/specification/specification\");\nObject.defineProperty(exports, \"registerElementSpecificationEntry\", { enumerable: true, get: function () { return specification_1.registerElementSpecificationEntry; } });\nObject.defineProperty(exports, \"registerElementSpecificationEntries\", { enumerable: true, get: function () { return specification_1.registerElementSpecificationEntries; } });\nObject.defineProperty(exports, \"removeElementSpecificationEntry\", { enumerable: true, get: function () { return specification_1.removeElementSpecificationEntry; } });\nObject.defineProperty(exports, \"removeElementSpecificationEntries\", { enumerable: true, get: function () { return specification_1.removeElementSpecificationEntries; } });\nObject.defineProperty(exports, \"queryElementSpecification\", { enumerable: true, get: function () { return specification_1.queryElementSpecification; } });\nObject.defineProperty(exports, \"getElementNames\", { enumerable: true, get: function () { return specification_1.getElementNames; } });\nObject.defineProperty(exports, \"getElementCategories\", { enumerable: true, get: function () { return specification_1.getElementCategories; } });\nObject.defineProperty(exports, \"resetElementSpecificationTable\", { enumerable: true, get: function () { return specification_1.resetElementSpecificationTable; } });\nObject.defineProperty(exports, \"getSpecificationSnapshot\", { enumerable: true, get: function () { return specification_1.getSpecificationSnapshot; } });\nObject.defineProperty(exports, \"checkValueAssignment\", { enumerable: true, get: function () { return specification_1.checkValueAssignment; } });\nvar syntaxTree_1 = require(\"./syntax/tree/syntaxTree\");\nObject.defineProperty(exports, \"getProcessNodes\", { enumerable: true, get: function () { return syntaxTree_1.getProcessNodes; } });\nObject.defineProperty(exports, \"getRoutineNodes\", { enumerable: true, get: function () { return syntaxTree_1.getRoutineNodes; } });\nObject.defineProperty(exports, \"getCrumbs\", { enumerable: true, get: function () { return syntaxTree_1.getCrumbs; } });\nObject.defineProperty(exports, \"getNode\", { enumerable: true, get: function () { return syntaxTree_1.getNode; } });\nObject.defineProperty(exports, \"generateSnapshot\", { enumerable: true, get: function () { return syntaxTree_1.generateSnapshot; } });\nObject.defineProperty(exports, \"generateFromSnapshot\", { enumerable: true, get: function () { return syntaxTree_1.generateFromSnapshot; } });\nObject.defineProperty(exports, \"resetSyntaxTree\", { enumerable: true, get: function () { return syntaxTree_1.resetSyntaxTree; } });\nObject.defineProperty(exports, \"assignNodeValue\", { enumerable: true, get: function () { return syntaxTree_1.assignNodeValue; } });\n// -- warehouse ------------------------------------------------------------------------------------\nvar warehouse_1 = require(\"./syntax/warehouse/warehouse\");\nObject.defineProperty(exports, \"getInstance\", { enumerable: true, get: function () { return warehouse_1.getInstance; } });\nObject.defineProperty(exports, \"getNameCount\", { enumerable: true, get: function () { return warehouse_1.getNameCount; } });\nObject.defineProperty(exports, \"getNameCountAll\", { enumerable: true, get: function () { return warehouse_1.getNameCountAll; } });\nObject.defineProperty(exports, \"getTypeCount\", { enumerable: true, get: function () { return warehouse_1.getTypeCount; } });\nObject.defineProperty(exports, \"getTypeCountAll\", { enumerable: true, get: function () { return warehouse_1.getTypeCountAll; } });\nObject.defineProperty(exports, \"getKindCount\", { enumerable: true, get: function () { return warehouse_1.getKindCount; } });\nObject.defineProperty(exports, \"getKindCountAll\", { enumerable: true, get: function () { return warehouse_1.getKindCountAll; } });\nObject.defineProperty(exports, \"getCategoryCount\", { enumerable: true, get: function () { return warehouse_1.getCategoryCount; } });\nObject.defineProperty(exports, \"getCategoryCountAll\", { enumerable: true, get: function () { return warehouse_1.getCategoryCountAll; } });\nvar interpreter_1 = require(\"./execution/interpreter\");\nObject.defineProperty(exports, \"declareVariable\", { enumerable: true, get: function () { return interpreter_1.declareVariable; } });\nObject.defineProperty(exports, \"queryVariable\", { enumerable: true, get: function () { return interpreter_1.queryVariable; } });\nObject.defineProperty(exports, \"overrideProgramCounter\", { enumerable: true, get: function () { return interpreter_1.overrideProgramCounter; } });\nObject.defineProperty(exports, \"releaseProgramCounter\", { enumerable: true, get: function () { return interpreter_1.releaseProgramCounter; } });\nObject.defineProperty(exports, \"run\", { enumerable: true, get: function () { return interpreter_1.run; } });\n// == LIBRARY ======================================================================================\n// -- specification --------------------------------------------------------------------------------\nvar specification_2 = require(\"./library/specification\");\nObject.defineProperty(exports, \"librarySpecification\", { enumerable: true, get: function () { return __importDefault(specification_2).default; } });\n// -- elements -------------------------------------------------------------------------------------\nvar elementValue_1 = require(\"./library/elements/elementValue\");\nObject.defineProperty(exports, \"ElementValueBoolean\", { enumerable: true, get: function () { return elementValue_1.ElementValueBoolean; } });\nObject.defineProperty(exports, \"ElementValueNumber\", { enumerable: true, get: function () { return elementValue_1.ElementValueNumber; } });\nObject.defineProperty(exports, \"ElementValueString\", { enumerable: true, get: function () { return elementValue_1.ElementValueString; } });\nvar elementBox_1 = require(\"./library/elements/elementBox\");\nObject.defineProperty(exports, \"ElementBoxGeneric\", { enumerable: true, get: function () { return elementBox_1.ElementBoxGeneric; } });\nObject.defineProperty(exports, \"ElementBoxBoolean\", { enumerable: true, get: function () { return elementBox_1.ElementBoxBoolean; } });\nObject.defineProperty(exports, \"ElementBoxNumber\", { enumerable: true, get: function () { return elementBox_1.ElementBoxNumber; } });\nObject.defineProperty(exports, \"ElementBoxString\", { enumerable: true, get: function () { return elementBox_1.ElementBoxString; } });\nvar elementBoxIdentifier_1 = require(\"./library/elements/elementBoxIdentifier\");\nObject.defineProperty(exports, \"ElementBoxIdentifierGeneric\", { enumerable: true, get: function () { return elementBoxIdentifier_1.ElementBoxIdentifierGeneric; } });\nObject.defineProperty(exports, \"ElementBoxIdentifierBoolean\", { enumerable: true, get: function () { return elementBoxIdentifier_1.ElementBoxIdentifierBoolean; } });\nObject.defineProperty(exports, \"ElementBoxIdentifierNumber\", { enumerable: true, get: function () { return elementBoxIdentifier_1.ElementBoxIdentifierNumber; } });\nObject.defineProperty(exports, \"ElementBoxIdentifierString\", { enumerable: true, get: function () { return elementBoxIdentifier_1.ElementBoxIdentifierString; } });\nvar elementOperatorMath_1 = require(\"./library/elements/elementOperatorMath\");\nObject.defineProperty(exports, \"ElementOperatorMathPlus\", { enumerable: true, get: function () { return elementOperatorMath_1.ElementOperatorMathPlus; } });\nObject.defineProperty(exports, \"ElementOperatorMathMinus\", { enumerable: true, get: function () { return elementOperatorMath_1.ElementOperatorMathMinus; } });\nObject.defineProperty(exports, \"ElementOperatorMathTimes\", { enumerable: true, get: function () { return elementOperatorMath_1.ElementOperatorMathTimes; } });\nObject.defineProperty(exports, \"ElementOperatorMathDivide\", { enumerable: true, get: function () { return elementOperatorMath_1.ElementOperatorMathDivide; } });\nObject.defineProperty(exports, \"ElementOperatorMathModulus\", { enumerable: true, get: function () { return elementOperatorMath_1.ElementOperatorMathModulus; } });\nvar elementConditional_1 = require(\"./library/elements/elementConditional\");\nObject.defineProperty(exports, \"ElementIf\", { enumerable: true, get: function () { return elementConditional_1.ElementIf; } });\nvar elementLoop_1 = require(\"./library/elements/elementLoop\");\nObject.defineProperty(exports, \"ElementRepeat\", { enumerable: true, get: function () { return elementLoop_1.ElementRepeat; } });\nvar elementPrint_1 = require(\"./library/elements/elementPrint\");\nObject.defineProperty(exports, \"ElementPrint\", { enumerable: true, get: function () { return elementPrint_1.ElementPrint; } });\nvar elementProgram_1 = require(\"./library/elements/elementProgram\");\nObject.defineProperty(exports, \"ElementProcess\", { enumerable: true, get: function () { return elementProgram_1.ElementProcess; } });\nObject.defineProperty(exports, \"ElementRoutine\", { enumerable: true, get: function () { return elementProgram_1.ElementRoutine; } });\n//# sourceMappingURL=index.js.map"],"names":["elementSyntax","ElementSyntax","name","label","kind","type","argMap","argName","value","elementArgument","elementSyntax_1","require$$0","ElementArgument","returnType","initialValue","ElementData","ElementExpression","elementInstruction","ElementInstruction","ElementStatement","ElementBlock","specification","_elementSpecification","_elementSpecificationSnapshot","registerElementSpecificationEntry","category","prototype","specificationTableEntry","specificationSnapshotTableEntry","key","registerElementSpecificationEntries","registerStatus","identifier","removeElementSpecificationEntry","removeElementSpecificationEntries","names","removeStatus","queryElementSpecification","getElementNames","getElementCategories","_","resetElementSpecificationTable","getSpecificationSnapshot","checkValueAssignment","values","typeDeepInfer","getRandomValues","rnds8","rng","REGEX","validate","uuid","byteToHex","i","stringify","arr","offset","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","b","node","clockseq","seedBytes","msecs","nsecs","dt","tl","tmh","n","parse","v","stringToBytes","str","bytes","DNS","URL","v35","version","hashfunc","generateUUID","namespace","md5","msg","md5ToHexEncodedArray","wordsToMd5","bytesToWords","input","output","length32","hexTab","x","hex","getOutputLength","inputLength8","len","a","c","d","olda","oldb","oldc","oldd","md5ff","md5gg","md5hh","md5ii","safeAdd","length8","y","lsw","msw","bitRotateLeft","num","cnt","md5cmn","q","s","t","v3","v3$1","v4","rnds","f","z","ROTL","sha1","K","H","l","N","M","_i","j","_i2","W","_t","e","_t2","T","v5","v5$1","nil","warehouse","removeInstance_1","getInstance_1","addInstance_1","uuid_1","specification_1","require$$1","elementArgument_1","require$$2","_ElementDataCover","_ElementExpressionCover","_elementNameCountMap","_elementKindCountMap","_elementTypeCountMap","_elementCategoryCountMap","_elementMap","_addInstance","elementName","instanceID","instance","_resetElementNameCountMap","_resetElementKindCountMap","_resetElementTypeCountMap","_resetElementCategoryCountMap","addInstance","elementSpecification","getInstance","removeInstance","getNameCount","getNameCountAll","getKindCount","getKindCountAll","getTypeCount","getTypeCountAll","getCategoryCount","getCategoryCountAll","resetWarehouse","warehouse_1","TreeNode","nodeID","snapshot","TreeNodeArgument","TreeNodeData","TreeNodeExpression","TreeNodeInstruction","TreeNodeStatement","TreeNodeBlock","scope","nextNode","syntaxTree","node_1","require$$3","_nodeMap","_syntaxTree","_destroyNode","_attachInstructionCheck","connectorNodeID","connectingNodeID","nodeConnector","nodeConnecting","specificationConnector","specificationConnecting","getProcessNodes","getRoutineNodes","getCrumbs","addNode","getNode","removeNode","list","resetSyntaxTree","attachArgumentCheck","instanceConnector","instanceConnecting","typeConnector","typeConnecting","attachArgument","detachArgument","attachInstructionBelowCheck","attachInstructionBelow","detachInstructionBelow","attachInstructionInsideCheck","attachInstructionInside","detachInstructionInside","generateSnapshot","snapshotList","generateFromSnapshot","__generateSnapshotList","snapshotNodes","__generateFromSnapshotData","__generateFromSnapshotExpression","__generateFromSnapshotStatement","__generateFromSnapshotBlock","__generateFromSnapshotArg","argNodeID","innerNodeID","assignNodeValue","symbolTable","_globalTable","_processTable","_routineTable","_addTableVariable","variable","dataType","selector","tableName","table","_getTableVariable","_getTableVariableNames","_getTableVariableNamesWithTypes","res","_getTableVariableNamesAll","variables","_getTableVariableNamesWithTypesAll","_removeTableVariable","_flushTableVariables","addGlobalVariable","getGlobalVariable","getGlobalVariableNames","getGlobalVariableNamesWithTypes","removeGlobalVariable","addProcessVariable","process","getProcessVariable","getProcessVariableNames","getProcessVariableNamesWithTypes","getProcessVariableNamesAll","getProcessVariableNamesWithTypesAll","removeProcessVariable","addRoutineVariable","routine","getRoutineVariable","getRoutineVariableNames","getRoutineVariableNamesWithTypes","getRoutineVariableNamesAll","getRoutineVariableNamesWithTypesAll","removeRoutineVariable","flushGlobalVariables","flushProcessVariables","flushProcessVariablesAll","flushRoutineVariables","flushRoutineVariablesAll","flushAllVariables","parser","syntaxTree_1","_processNodes","_routineNodes","_crumbNodes","_programMap","_executionItem","_reset","processNode","routineNode","crumbNode","validateArgumentSequence","instructionNode","__validateArgumentSequence","argNode","result","generateArgumentSequence","__generateArgumentSequence","sequence","setExecutionItem","executionItemEntry","getExecutionItem","setPCOverride","signal","clearPCOverride","getNextElement","handler","currentNode","frames","frame","__handlePages","upcomingNode","__handleInstructionFall","marker","topFramePages","goInner","element","stackTrace","pages","interpreter","symbolTable_1","parser_1","elementInstruction_1","declareVariable","queryVariable","overrideProgramCounter","releaseProgramCounter","run","ElementDataCover","ElementExpressionCover","memo","__execute","elementValue","ElementValue","ElementValueBoolean","ElementValueNumber","ElementValueString","elementBox","interpreter_1","ElementBox","types","params","ElementBoxGeneric","ElementBoxBoolean","ElementBoxNumber","ElementBoxString","elementBoxIdentifier","ElementBoxIdentifier","expectedType","ElementBoxIdentifierGeneric","ElementBoxIdentifierBoolean","ElementBoxIdentifierNumber","ElementBoxIdentifierString","elementOperatorMath","ElementOperatorMath","operator","operand1","operand2","ElementOperatorMathPlus","ElementOperatorMathMinus","ElementOperatorMathTimes","ElementOperatorMathDivide","ElementOperatorMathModulus","elementLoop","ElementRepeat","elementConditional","ElementIf","elementProgram","ElementProcess","ElementRoutine","elementPrint","ElementPrint","elementValue_1","elementBox_1","elementBoxIdentifier_1","elementOperatorMath_1","elementLoop_1","require$$4","elementConditional_1","require$$5","elementProgram_1","require$$6","elementPrint_1","require$$7","_elementSpecificationEntries","__importDefault","this","mod","exports","specification_2","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]}