{"version":3,"mappings":"wDAOO,SAASA,EAAgBC,EAAmC,CAC3DA,GAAeA,aAAuB,UAC/BC,EAAA,qCAAY,MAAE,KAAK,CAAC,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,QAAAC,KAAc,CACvEJ,EAAOF,CAAW,EAClBG,EAAOH,CAAW,EAClBI,EAAOJ,CAAW,EAClBK,EAAOL,CAAW,EAClBM,EAAQN,CAAW,EACtB,CAET,CAKO,SAASO,GAAoB,CAChC,MAAMC,EAAW,mBAGb,kBAAmB,WACZ,wBAAiB,OAAQ,IAAM,CAClC,UAAU,cACL,SAAS,GAAGA,QAAe,EAC3B,KAAMC,GAAiB,CACZ,YAAI,kBAAmBA,CAAY,EAC9C,EACA,MAAOC,GAAsB,CAClB,YAAI,2BAA4BA,CAAiB,EAC5D,EACR,CAET,CAYO,SAASC,EAAiBC,EAA4B,CAErD,OAAO,OAAO,SAAS,OAAS,OAAO,SAAS,SAAWA,CAInE","names":["reportWebVitals","onPerfEntry","__vitePreload","getCLS","getFID","getFCP","getLCP","getTTFB","loadServiceWorker","BASE_URL","registration","registrationError","constructWasmUrl","importPath"],"sources":["../../src/utils/misc.ts"],"sourcesContent":["import { ReportHandler } from 'web-vitals';\n\n/**\n * If you want to start measuring performance in your app, pass a function to log results\n * (e.g.: reportWebVitals(console.log))\n * @param onPerfEntry\n */\nexport function reportWebVitals(onPerfEntry?: ReportHandler): void {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n}\n\n/**\n * Used to load service worker in production only.\n */\nexport function loadServiceWorker() {\n    const BASE_URL = import.meta.env.BASE_URL ?? window?.location?.pathname ?? '/';\n    const ENABLE_SW = import.meta.env.DEV ? false : true;\n\n    if ('serviceWorker' in navigator && ENABLE_SW) {\n        window.addEventListener('load', () => {\n            navigator.serviceWorker\n                .register(`${BASE_URL}sw.js`)\n                .then((registration) => {\n                    console.log('SW registered: ', registration);\n                })\n                .catch((registrationError) => {\n                    console.log('SW registration failed: ', registrationError);\n                });\n        });\n    }\n}\n\n/**\n * Used to construct a string URL to the location of the WASM module which is included as an asset.\n *\n * Usage:\n * import wasmModule from '/path/to/file.wasm';\n * const urlToWasmFile = constructWasmUrl(wasmModule);\n *\n * @param importPath the WASM module import\n * @returns URL to WASM module included as asset\n */\nexport function constructWasmUrl(importPath: string): string {\n    if (import.meta.env.PROD) {\n        return window.location.origin + window.location.pathname + importPath;\n    } else {\n        return importPath;\n    }\n}\n"],"file":"assets/misc-ecacff45.js"}