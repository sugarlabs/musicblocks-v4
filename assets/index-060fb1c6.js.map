{"version":3,"mappings":"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","names":["_importMap","_loadConfig","preset","__variableDynamicImportRuntimeHelper","__vitePreload","_updateImportMap","item","subitem","assets","components","init","config","componentManifest","assetManifest","importAssets","getAssets","splashTimeStart","initView","setView","mountSplash","definition","injected","identifier","manifest","updateSplash","stats","res","updateSplashData","data","getAssetsSize","all","val","key","a","b","getComponentsSize","allAssetsSize","loadedAssetsSize","allComponentsSize","loadedComponentsSize","langName","allLangSize","loadedLangSize","totalSize","loadedSize","importItemLang","importListComponents","id","importListAssets","_","assetId","componentId","importStrings","importComponent","importAsset","resolve","getComponent","componentIds","componentDefinitionEntries","getStrings","strings","_a","componentsOrdered","mountComponents","setupComponents","registerElements","serializeComponentDependencies","dependencies","unmountSplash","splashTime","splashBuffer","loadServiceWorker"],"sources":["../../src/index.ts"],"sourcesContent":["import type { IAppConfig, TAppImportMap } from '#/@types/app';\nimport type {\n    IComponent,\n    IComponentDefinition,\n    IComponentDefinitionExtended,\n    TComponentId,\n} from '#/@types/components';\nimport type { TAsset } from '#/@types/assets';\nimport type { TI18nLang } from '#/@types/i18n';\n\n// -------------------------------------------------------------------------------------------------\n\nconst _importMap: TAppImportMap = {\n    lang: {},\n    assets: {},\n    components: {},\n};\n\n// -------------------------------------------------------------------------------------------------\n\nasync function _loadConfig(preset: number): Promise<IAppConfig> {\n    return (await import(`./config/preset/preset-${preset}.ts`)).default;\n}\n\nfunction _updateImportMap(item: 'lang', subitem: TI18nLang): TAppImportMap;\nfunction _updateImportMap(item: 'assets', subitem: string): TAppImportMap;\nfunction _updateImportMap(item: 'components', subitem: TComponentId): TAppImportMap;\nfunction _updateImportMap(item: keyof TAppImportMap, subitem?: string): TAppImportMap {\n    if (item === 'lang') {\n        _importMap.lang[subitem as TI18nLang] = true;\n    } else if (item === 'assets') {\n        const assets = { ..._importMap.assets };\n        assets[subitem as string] = true;\n        _importMap.assets = { ...assets };\n    } else if (item === 'components') {\n        const components = { ..._importMap.components };\n        components[subitem as TComponentId] = true;\n        _importMap.components = { ...components };\n    }\n\n    // if (import.meta.env.DEV) console.log(`${item}${subitem ? ` > ${subitem}` : ''}`);\n\n    return _importMap;\n}\n\n// -------------------------------------------------------------------------------------------------\n\nasync function init(config?: IAppConfig) {\n    if (config === undefined) {\n        config = await _loadConfig(import.meta.env.VITE_CONFIG_PRESET);\n    }\n\n    const componentManifest = (await import('./components')).default;\n    const assetManifest = (await import('@sugarlabs/mb4-assets')).default;\n\n    const { importAssets, getAssets } = await import('@sugarlabs/mb4-assets');\n\n    let splashTimeStart: number;\n\n    /*\n     * Initialize the application view and mount the spalsh screen.\n     */\n\n    {\n        const { initView, setView } = await import('@sugarlabs/mb4-view');\n        const { mountSplash, definition, injected } = await import('./splash');\n\n        await importAssets(\n            Object.entries(assetManifest)\n                .filter(([identifier]) => (definition.assets as string[]).includes(identifier))\n                .map(([identifier, manifest]) => ({ identifier, manifest })),\n            () => undefined,\n        );\n\n        // @ts-ignore\n        injected.assets = getAssets(definition.assets);\n\n        // Initialize view toolkit\n        await initView();\n        await mountSplash();\n        splashTimeStart = Date.now();\n        await setView('main');\n    }\n\n    /*\n     * Dynamically import components, strings, and assets asynchronously.\n     */\n\n    {\n        const { updateSplash } = await import('./splash');\n\n        const stats = import.meta.env.PROD\n            ? await fetch('stats.json').then((res) => res.json())\n            : undefined;\n\n        const updateSplashData = (data: TAppImportMap) => {\n            if (import.meta.env.DEV) {\n                const total =\n                    1 + Object.keys(data.assets).length + Object.keys(data.components).length;\n                const items =\n                    (data.lang !== undefined ? 1 : 0) +\n                    Object.values(data.assets).filter((flag) => flag).length +\n                    Object.values(data.components).filter((flag) => flag).length;\n                updateSplash((items / total) * 100);\n            } else {\n                const getAssetsSize = (all = true): number => {\n                    return Object.entries(data.assets)\n                        .filter(([, val]) => all || val)\n                        .map(\n                            ([key]) =>\n                                stats.assets[assetManifest[key].path.split('assets/').slice(-1)[0]],\n                        )\n                        .reduce((a, b) => a + b, 0);\n                };\n\n                const getComponentsSize = (all = true): number => {\n                    return Object.entries(data.components)\n                        .filter(([, val]) => all || val)\n                        .map(([key]) => stats.modules[key])\n                        .reduce((a, b) => a + b, 0);\n                };\n\n                const allAssetsSize = getAssetsSize();\n                const loadedAssetsSize = getAssetsSize(false);\n\n                const allComponentsSize = getComponentsSize();\n                const loadedComponentsSize = getComponentsSize(false);\n\n                const langName = Object.keys(data.lang)[0] as TI18nLang;\n                const allLangSize = stats.i18n[langName];\n                const loadedLangSize = data.lang[langName] ? allLangSize : 0;\n\n                const totalSize = allAssetsSize + allComponentsSize + allLangSize;\n                const loadedSize = loadedAssetsSize + loadedComponentsSize + loadedLangSize;\n\n                updateSplash((loadedSize / totalSize) * 100);\n            }\n        };\n\n        const importItemLang = config.env.lang;\n        /** List to component Ids to import. */\n        const importListComponents = config.components.map(({ id }) => id);\n        /** List to asset Ids to import. */\n        const importListAssets = (() => {\n            try {\n                return Object.entries(componentManifest)\n                    .map(\n                        ([\n                            _,\n                            {\n                                definition: { assets },\n                            },\n                        ]) => assets,\n                    )\n                    .reduce((a, b) => [...new Set([...a, ...b])]);\n            } catch (e) {\n                return [];\n            }\n        })();\n\n        _importMap.lang = Object.fromEntries([[importItemLang, false]]);\n        _importMap.assets = Object.fromEntries(importListAssets.map((assetId) => [assetId, false]));\n        _importMap.components = Object.fromEntries(\n            importListComponents.map((componentId) => [componentId, false]),\n        );\n\n        const { importStrings } = await import('@sugarlabs/mb4-i18n');\n        const { importComponent } = await import('@sugarlabs/mb4-config');\n        const { importAsset } = await import('@sugarlabs/mb4-assets');\n\n        await Promise.all([\n            // import ES module for i18n and load strings\n            importStrings(importItemLang).then(() =>\n                updateSplashData(_updateImportMap('lang', importItemLang)),\n            ),\n            // import ES modules for components\n            ...importListComponents.map(\n                (componentId) =>\n                    new Promise<void>((resolve) => {\n                        importComponent(\n                            componentId,\n                            componentManifest[componentId].importFunc,\n                        ).then(() => {\n                            updateSplashData(_updateImportMap('components', componentId));\n                            resolve();\n                        });\n                    }),\n            ),\n            // import asset files and load data\n            ...importListAssets.map(\n                (assetId) =>\n                    new Promise<void>((resolve) => {\n                        importAsset(assetId, assetManifest[assetId]).then(() => {\n                            updateSplashData(_updateImportMap('assets', assetId));\n                            resolve();\n                        });\n                    }),\n            ),\n        ]);\n    }\n\n    /*\n     * Collect imported components.\n     */\n\n    const { getComponent } = await import('@sugarlabs/mb4-config');\n    const componentIds = config.components.map(({ id }) => id);\n\n    /** Map of component identifier and corresponding component module. */\n    const components: Partial<Record<TComponentId, IComponent>> = Object.fromEntries(\n        componentIds.map((componentId) => [componentId, getComponent(componentId)]),\n    );\n    /** List of 2-tuples of component identifier and component definition. */\n    const componentDefinitionEntries: [TComponentId, IComponentDefinition][] = componentIds.map(\n        (componentId) => [componentId, componentManifest[componentId].definition],\n    );\n\n    /**\n     * Inject items into component modules.\n     */\n\n    {\n        const { getStrings } = await import('@sugarlabs/mb4-i18n');\n\n        // Inject i18n strings.\n        componentDefinitionEntries.forEach(\n            ([id, { strings }]) =>\n                (components[id]!.injected.i18n =\n                    Object.keys(strings).length !== 0\n                        ? getStrings(Object.keys(strings))\n                        : undefined),\n        );\n\n        // Inject asset entries.\n        componentDefinitionEntries.forEach(\n            ([id, { assets }]) =>\n                (components[id]!.injected.assets =\n                    assets !== undefined\n                        ? (getAssets(assets) as { [identifier: string]: TAsset })\n                        : undefined),\n        );\n\n        // Inject feature flags.\n        componentDefinitionEntries.forEach(\n            ([componentId]) =>\n                (components[componentId]!.injected.flags = config!.components.find(\n                    ({ id }) => id === componentId,\n                    // @ts-ignore\n                )?.flags),\n        );\n    }\n\n    /**\n     * Serialized list of component identifiers in which the dependent components take precedence.\n     */\n    let componentsOrdered: TComponentId[];\n\n    /*\n     * Complete the application initialization\n     */\n\n    {\n        const {\n            mountComponents,\n            setupComponents,\n            registerElements,\n            serializeComponentDependencies,\n        } = await import('@sugarlabs/mb4-config');\n\n        // Generate serialized list of component identifiers\n        componentsOrdered = serializeComponentDependencies(\n            componentDefinitionEntries\n                .map<[TComponentId, TComponentId[]]>(([id, { dependencies }]) => [\n                    id,\n                    [...new Set([...dependencies.optional, ...dependencies.required])],\n                ])\n                .map(([id, dependencies]) => ({ id, dependencies })),\n        );\n\n        // Register syntax elements as configured for each component\n        registerElements(\n            componentsOrdered.map((componentId) => {\n                return {\n                    id: componentId,\n                    // @ts-ignore\n                    filter: config.components.find(({ id }) => id === componentId)?.elements,\n                };\n            }),\n        );\n\n        // Mount components in serialized order\n        await mountComponents(componentsOrdered);\n\n        // Initialize components in serialized order\n        await setupComponents(componentsOrdered);\n\n        // Unmount the splash screen.\n        const { unmountSplash } = await import('./splash');\n        const splashTimeEnd = Date.now();\n        const splashTime = splashTimeEnd - splashTimeStart;\n        const splashBuffer = Math.max(import.meta.env.VITE_APP_SPLASH_MIN_DELAY - splashTime, 0);\n        setTimeout(() => unmountSplash(), splashBuffer);\n    }\n\n    if (import.meta.env.PROD) {\n        const { loadServiceWorker } = await import('./utils/misc');\n        loadServiceWorker();\n    }\n}\n\n// =================================================================================================\n\n(async function () {\n    /**\n     * if PRODUCTION mode, proceed initializing with configuration preset.\n     */\n\n    if (import.meta.env.PROD) {\n        await init();\n        return;\n    }\n\n    /**\n     * if DEVELOPMENT mode, and configuration in session storage,\n     * proceed initializing with configuration from session storage.\n     */\n\n    {\n        const config = window.sessionStorage.getItem('appConfig');\n\n        if (config !== null) {\n            await init(JSON.parse(config) as IAppConfig);\n            return;\n        }\n    }\n\n    /**\n     * if DEVELOPMENT mode, and configuration not in session storage,\n     * open configurator page.\n     * @todo currently needs refresh to go to main app page\n     */\n\n    {\n        const config = await _loadConfig(import.meta.env.VITE_CONFIG_PRESET);\n\n        const { initView } = await import('@sugarlabs/mb4-view');\n        await initView();\n\n        window.sessionStorage.setItem('appConfig', JSON.stringify(config));\n\n        const componentManifest = (await import('./components')).default;\n        const { importComponent } = await import('@sugarlabs/mb4-config');\n        const components = Object.fromEntries(\n            await Promise.all(\n                (Object.keys(componentManifest) as TComponentId[]).map((componentId) =>\n                    importComponent(componentId, componentManifest[componentId].importFunc).then(\n                        (component) => [componentId, component],\n                    ),\n                ),\n            ),\n        ) as Record<TComponentId, IComponent>;\n        const componentDefinitions = Object.fromEntries(\n            Object.entries(componentManifest).map<[TComponentId, IComponentDefinitionExtended]>(\n                ([componentId, { definition }]) => [\n                    componentId as TComponentId,\n                    { ...definition, elements: components[componentId as TComponentId].elements },\n                ],\n            ),\n        ) as Record<TComponentId, IComponentDefinition>;\n\n        const { mountConfigPage, updateConfigPage } = await import('./config');\n\n        await mountConfigPage(\n            { ...config },\n            Object.fromEntries(\n                (\n                    Object.entries(componentDefinitions) as [TComponentId, IComponentDefinition][]\n                ).map(([componentId, definition]) => [\n                    componentId,\n                    {\n                        ...definition,\n                        elements: components[componentId]?.elements,\n                    },\n                ]),\n            ),\n            (config: IAppConfig) =>\n                requestAnimationFrame(() => {\n                    window.sessionStorage.setItem('appConfig', JSON.stringify(config));\n                    updateConfigPage(config);\n                }),\n        );\n    }\n})();\n"],"file":"assets/index-060fb1c6.js"}