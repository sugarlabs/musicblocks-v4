{"version":3,"file":"index-97cad2bf.js","sources":["../../../lib/events/src/index.ts"],"sourcesContent":["import type { TEvent } from '#/@types/events';\n\n// -- private variables ----------------------------------------------------------------------------\n\n/** Map of event names and corresponding list of callbacks. */\nconst _eventTable: Partial<Record<TEvent, CallableFunction[]>> = {};\n\n// -- public functions -----------------------------------------------------------------------------\n\nexport function hearEvent(event: 'menu.run', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.stop', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.reset', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.uploadFile', callback: (e: Event) => unknown): void;\nexport function hearEvent(event: 'menu.startRecording', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.stopRecording', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.exportDrawing', callback: () => unknown): void;\nexport function hearEvent(event: 'menu.loadProject', callback: (e: Event) => unknown): void;\nexport function hearEvent(event: 'menu.saveProject', callback: () => unknown): void;\n/**\n * Adds a callback to an event.\n * @param event event name\n * @param callback callback to be called when the event is emitted\n */\nexport function hearEvent(event: TEvent, callback: CallableFunction): void {\n    if (!(event in _eventTable)) _eventTable[event] = [];\n\n    _eventTable[event]!.push(callback);\n}\n\n// -----------------------------------------------------------------------------\n\nexport function emitEvent(event: 'menu.run'): void;\nexport function emitEvent(event: 'menu.stop'): void;\nexport function emitEvent(event: 'menu.reset'): void;\n/**\n * Emits an event.\n * @param event event name\n * @param args arguments to the event callbacks\n */\nexport function emitEvent(event: TEvent, ...args: unknown[]): void {\n    if (!(event in _eventTable) || _eventTable[event]!.length === 0) return;\n\n    _eventTable[event]!.forEach((callback) => callback(...args));\n}\n"],"names":["_eventTable","hearEvent","event","callback","emitEvent","args"],"mappings":"AAKA,MAAMA,EAA2D,CAAA,EAkBjD,SAAAC,EAAUC,EAAeC,EAAkC,CACjED,KAASF,IAA0BA,EAAAE,CAAK,EAAI,IAEtCF,EAAAE,CAAK,EAAG,KAAKC,CAAQ,CACrC,CAYgB,SAAAC,EAAUF,KAAkBG,EAAuB,CAC3D,EAAEH,KAASF,IAAgBA,EAAYE,CAAK,EAAG,SAAW,GAElDF,EAAAE,CAAK,EAAG,QAASC,GAAaA,EAAS,GAAGE,CAAI,CAAC,CAC/D"}