{"version":3,"file":"index-e95da2f1.js","sources":["../../../lib/view/src/components/index.tsx"],"sourcesContent":["import type { Root } from 'react-dom/client';\n\nimport { flushSync } from 'react-dom';\nimport { createRoot } from 'react-dom/client';\n\n// -- ui items -------------------------------------------------------------------------------------\n\nimport Toolbar from './toolbar';\n\nimport './index.scss';\n\n// -- component definitions ------------------------------------------------------------------------\n\n/**\n * React component definition of the root application wrapper.\n */\nfunction App(props: {\n  /** Whether or not to mount overlay. */\n  activeOverlay: boolean;\n}): JSX.Element {\n  return (\n    <>\n      {props.activeOverlay && (\n        <div id=\"root-overlay\">\n          <div id=\"root-overlay-body\"></div>\n        </div>\n      )}\n      <main id=\"root-main\"></main>\n    </>\n  );\n}\n\n/**\n * React component definition of the main application wrapper\n * @returns\n */\nfunction AppMain(): JSX.Element {\n  return (\n    <>\n      <Toolbar />\n      <div id=\"workspace\"></div>\n    </>\n  );\n}\n\n// -- private variables ----------------------------------------------------------------------------\n\n/** Root view states. */\nconst _state = {\n  /** Whether or not to mount overlay. */\n  activeOverlay: false,\n};\n\n// -- private variables ----------------------------------------------------------------------------\n\n/** React root for root application view. */\nlet _rootContainer: Root;\n/** React root for main application view. */\nlet _rootMainContainer: Root;\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Initializes the root application view.\n * @description This is the first thing that must be called before doing anything else in the view.\n */\nexport async function initView(): Promise<void> {\n  if (_rootContainer === undefined)\n    _rootContainer = createRoot(document.getElementById('mb-root') as HTMLElement);\n\n  return new Promise((resolve) =>\n    flushSync(() => {\n      _rootContainer.render(<App activeOverlay={_state.activeOverlay}></App>);\n      requestAnimationFrame(() => resolve());\n    }),\n  );\n}\n\n/**\n * Sets the main application view.\n */\nexport function setView(method: 'main'): Promise<void>;\n/**\n * Embeds a React component in the viewport.\n * @param component React functional component\n */\nexport function setView(method: 'embed', component: JSX.Element): Promise<void>;\n//\nexport function setView(\n  method: 'main' | 'embed',\n  arg?: JSX.Element | ((container: HTMLElement) => Promise<void>),\n): Promise<void> {\n  //\n  return new Promise((resolve) => {\n    const rootElem = document.getElementById('root-main')!;\n\n    if (_rootMainContainer === undefined) _rootMainContainer = createRoot(rootElem);\n    flushSync(() => {\n      _rootMainContainer.render(method === 'embed' ? (arg as JSX.Element) : <AppMain></AppMain>);\n      requestAnimationFrame(() => resolve());\n    });\n  });\n}\n\n/**\n * Mounts the application overlay view.\n * @param setup setup callback for the component to place in the overlay\n */\nexport async function mountViewOverlay(setup: (container: HTMLElement) => Promise<void>) {\n  _state.activeOverlay = true;\n  await initView();\n  await setup(document.getElementById('root-overlay-body')!);\n}\n\n/**\n * Unmounts the application overlay view.\n */\nexport async function unmountViewOverlay(): Promise<void> {\n  return new Promise((resolve) => {\n    const timeTransition = Number(import.meta.env.VITE_APP_VIEW_OVERLAY_TRANSITION) || 500;\n    const timeTransitionBuffer =\n      Number(import.meta.env.VITE_APP_VIEW_OVERLAY_TRANSITION_BUFFER) || 50;\n\n    const overlay = document.getElementById('root-overlay') as HTMLElement;\n    overlay.style.transition = `top ${timeTransition / 1000}s ease`;\n    overlay.style.top = 'calc(-100% - 50px)';\n\n    setTimeout(() => {\n      _state.activeOverlay = false;\n      initView().then(() => resolve());\n    }, timeTransition + timeTransitionBuffer);\n  });\n}\n"],"names":["App","props","jsxs","Fragment","jsx","AppMain","Toolbar","_state","_rootContainer","_rootMainContainer","initView","createRoot","resolve","flushSync","setView","method","arg","rootElem","mountViewOverlay","setup","unmountViewOverlay","timeTransition","timeTransitionBuffer","overlay"],"mappings":"uGAgBA,SAASA,EAAIC,EAGG,CACd,OAEKC,EAAAC,EAAA,CAAA,SAAA,CAAMF,EAAA,iBACJ,MAAI,CAAA,GAAG,eACN,SAACG,EAAA,MAAA,CAAI,GAAG,mBAAA,CAAoB,CAC9B,CAAA,EAEFA,EAAC,OAAK,CAAA,GAAG,WAAY,CAAA,CACvB,CAAA,CAAA,CAEJ,CAMA,SAASC,GAAuB,CAC9B,OAEIH,EAAAC,EAAA,CAAA,SAAA,CAAAC,EAACE,EAAQ,EAAA,EACTF,EAAC,MAAI,CAAA,GAAG,WAAY,CAAA,CACtB,CAAA,CAAA,CAEJ,CAKA,MAAMG,EAAS,CAEb,cAAe,EACjB,EAKA,IAAIC,EAEAC,EAQJ,eAAsBC,GAA0B,CAC9C,OAAIF,IAAmB,SACrBA,EAAiBG,EAAW,SAAS,eAAe,SAAS,CAAgB,GAExE,IAAI,QAASC,GAClBC,EAAAA,UAAU,IAAM,CACdL,EAAe,OAAQJ,EAAAJ,EAAA,CAAI,cAAeO,EAAO,aAAe,CAAA,CAAM,EAChD,sBAAA,IAAMK,GAAS,CAAA,CACtC,CAAA,CAEL,CAYgB,SAAAE,EACdC,EACAC,EACe,CAER,OAAA,IAAI,QAASJ,GAAY,CACxB,MAAAK,EAAW,SAAS,eAAe,WAAW,EAEhDR,IAAuB,SAAWA,EAAqBE,EAAWM,CAAQ,GAC9EJ,EAAAA,UAAU,IAAM,CACdJ,EAAmB,OAAOM,IAAW,QAAWC,EAAsBZ,EAACC,GAAQ,CAAA,CAAU,EACnE,sBAAA,IAAMO,GAAS,CAAA,CACtC,CAAA,CACF,CACH,CAMA,eAAsBM,EAAiBC,EAAkD,CACvFZ,EAAO,cAAgB,GACvB,MAAMG,EAAS,EACf,MAAMS,EAAM,SAAS,eAAe,mBAAmB,CAAE,CAC3D,CAKA,eAAsBC,GAAoC,CACjD,OAAA,IAAI,QAASR,GAAY,CAC9B,MAAMS,EAAiB,CAAO,QAAqD,IAC7EC,EACJ,CAAO,MAA4D,GAE/DC,EAAU,SAAS,eAAe,cAAc,EAC9CA,EAAA,MAAM,WAAa,OAAOF,EAAiB,YACnDE,EAAQ,MAAM,IAAM,qBAEpB,WAAW,IAAM,CACfhB,EAAO,cAAgB,GACvBG,IAAW,KAAK,IAAME,EAAS,CAAA,CAAA,EAC9BS,EAAiBC,CAAoB,CAAA,CACzC,CACH"}